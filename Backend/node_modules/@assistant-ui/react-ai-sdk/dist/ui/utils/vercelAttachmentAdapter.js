// src/ui/utils/vercelAttachmentAdapter.ts
import { generateId } from "ai";
var getFileDataURL = (file) => new Promise((resolve, reject) => {
  const reader = new FileReader();
  reader.onload = () => resolve(reader.result);
  reader.onerror = (error) => reject(error);
  reader.readAsDataURL(file);
});
var vercelAttachmentAdapter = {
  accept: "image/*, text/plain, text/html, text/markdown, text/csv, text/xml, text/json, text/css",
  async add({ file }) {
    return {
      id: generateId(),
      type: file.type.startsWith("image/") ? "image" : "file",
      name: file.name,
      file,
      contentType: file.type,
      content: [],
      status: { type: "requires-action", reason: "composer-send" }
    };
  },
  async send(attachment) {
    return {
      ...attachment,
      status: { type: "complete" },
      content: [
        {
          type: "file",
          mimeType: attachment.contentType,
          filename: attachment.name,
          data: await getFileDataURL(attachment.file)
        }
      ]
    };
  },
  async remove() {
  }
};
export {
  vercelAttachmentAdapter
};
//# sourceMappingURL=vercelAttachmentAdapter.js.map