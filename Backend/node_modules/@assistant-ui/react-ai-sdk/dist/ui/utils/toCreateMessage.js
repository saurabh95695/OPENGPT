// src/ui/utils/toCreateMessage.ts
import {
  generateId
} from "ai";
var toCreateMessage = (message) => {
  const inputParts = [
    ...message.content.filter((c) => c.type !== "file"),
    ...message.attachments?.flatMap(
      (a) => a.content.map((c) => ({
        ...c,
        filename: a.name
      }))
    ) ?? []
  ];
  const parts = inputParts.map((part) => {
    switch (part.type) {
      case "text":
        return {
          type: "text",
          text: part.text
        };
      case "image":
        return {
          type: "file",
          url: part.image,
          ...part.filename && { filename: part.filename },
          mediaType: "image/png"
        };
      case "file":
        return {
          type: "file",
          url: part.data,
          mediaType: part.mimeType,
          ...part.filename && { filename: part.filename }
        };
      default:
        throw new Error(`Unsupported part type: ${part.type}`);
    }
  });
  return {
    id: generateId(),
    role: message.role,
    parts
  };
};
export {
  toCreateMessage
};
//# sourceMappingURL=toCreateMessage.js.map