{"version":3,"sources":["../../src/types/EventTypes.ts"],"sourcesContent":["export type EventSource<T extends AssistantEvent = AssistantEvent> =\n  T extends `${infer Source}.${string}` ? Source : never;\n\ntype ScopeConfig = {\n  composer: \"thread\" | \"message\";\n  thread: never;\n  \"thread-list-item\": never;\n};\n\nexport type SourceByScope<TScope extends AssistantEventScope<AssistantEvent>> =\n  | (TScope extends \"*\" ? EventSource : never)\n  | (TScope extends keyof ScopeConfig ? TScope : never)\n  | {\n      [K in keyof ScopeConfig]: TScope extends ScopeConfig[K] ? K : never;\n    }[keyof ScopeConfig];\n\nexport type AssistantEventScope<TEvent extends AssistantEvent> =\n  | \"*\"\n  | EventSource<TEvent>\n  | ScopeConfig[EventSource<TEvent>];\n\nexport type AssistantEventSelector<TEvent extends AssistantEvent> =\n  | TEvent\n  | {\n      scope: AssistantEventScope<TEvent>;\n      event: TEvent;\n    };\n\nexport type AssistantEvent = keyof AssistantEventMap;\n\nexport type AssistantEventMap = {\n  // Thread events (from ThreadRuntimeEventType)\n  \"thread.run-start\": {\n    threadId: string;\n  };\n  \"thread.run-end\": {\n    threadId: string;\n  };\n  \"thread.initialize\": {\n    threadId: string;\n  };\n  \"thread.model-context-update\": {\n    threadId: string;\n  };\n\n  // Composer events (from ComposerRuntimeEventType)\n  \"composer.send\": {\n    threadId: string;\n    messageId?: string;\n  };\n  \"composer.attachment-add\": {\n    threadId: string;\n    messageId?: string;\n  };\n\n  // Thread list item events (from ThreadListItemEventType)\n  \"thread-list-item.switched-to\": {\n    threadId: string;\n  };\n  \"thread-list-item.switched-away\": {\n    threadId: string;\n  };\n\n  // Catch-all\n  \"*\": {\n    [K in Exclude<keyof AssistantEventMap, \"*\">]: {\n      event: K;\n      payload: AssistantEventMap[K];\n    };\n  }[Exclude<keyof AssistantEventMap, \"*\">];\n};\n\nexport const normalizeEventSelector = <TEvent extends AssistantEvent>(\n  selector: AssistantEventSelector<TEvent>,\n) => {\n  if (typeof selector === \"string\") {\n    const source = selector.split(\".\")[0] as AssistantEventScope<TEvent>;\n    return {\n      scope: source,\n      event: selector,\n    };\n  }\n\n  return {\n    scope: selector.scope,\n    event: selector.event,\n  };\n};\n\nexport const checkEventScope = <\n  TEvent extends AssistantEvent,\n  TExpectedScope extends AssistantEventScope<AssistantEvent>,\n>(\n  expectedScope: TExpectedScope,\n  scope: AssistantEventScope<TEvent>,\n  _event: TEvent,\n): _event is Extract<TEvent, `${SourceByScope<TExpectedScope>}.${string}`> => {\n  return scope === expectedScope;\n};\n\nexport type AssistantEventCallback<TEvent extends AssistantEvent> = (\n  payload: AssistantEventMap[TEvent],\n) => void;\n"],"mappings":";AAwEO,IAAM,yBAAyB,CACpC,aACG;AACH,MAAI,OAAO,aAAa,UAAU;AAChC,UAAM,SAAS,SAAS,MAAM,GAAG,EAAE,CAAC;AACpC,WAAO;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AAAA,IACL,OAAO,SAAS;AAAA,IAChB,OAAO,SAAS;AAAA,EAClB;AACF;AAEO,IAAM,kBAAkB,CAI7B,eACA,OACA,WAC4E;AAC5E,SAAO,UAAU;AACnB;","names":[]}