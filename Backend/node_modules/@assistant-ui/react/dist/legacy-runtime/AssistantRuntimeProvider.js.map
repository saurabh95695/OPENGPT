{"version":3,"sources":["../../src/legacy-runtime/AssistantRuntimeProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { FC, memo, PropsWithChildren } from \"react\";\nimport { AssistantProvider } from \"../context/react/AssistantApiContext\";\nimport { AssistantRuntime } from \"./runtime/AssistantRuntime\";\nimport { AssistantRuntimeCore } from \"./runtime-cores/core/AssistantRuntimeCore\";\nimport { useAssistantClient } from \"../client/AssistantClient\";\nimport { ThreadListClient } from \"./client/ThreadListRuntimeClient\";\n\nexport namespace AssistantProvider {\n  export type Props = PropsWithChildren<{\n    /**\n     * The runtime to provide to the rest of your app.\n     */\n    runtime: AssistantRuntime;\n  }>;\n}\n\nconst getRenderComponent = (runtime: AssistantRuntime) => {\n  return (runtime as { _core?: AssistantRuntimeCore })._core?.RenderComponent;\n};\n\nexport const AssistantRuntimeProviderImpl: FC<AssistantProvider.Props> = ({\n  children,\n  runtime,\n}) => {\n  const api = useAssistantClient({\n    threads: ThreadListClient({\n      runtime: runtime.threads,\n    }),\n    registerModelContextProvider: runtime.registerModelContextProvider,\n    __internal_runtime: runtime,\n  });\n\n  const RenderComponent = getRenderComponent(runtime);\n\n  return (\n    <AssistantProvider api={api}>\n      {RenderComponent && <RenderComponent />}\n\n      {children}\n    </AssistantProvider>\n  );\n};\n\nexport const AssistantRuntimeProvider = memo(AssistantRuntimeProviderImpl);\n"],"mappings":";;;AAEA,SAAa,YAA+B;AAC5C,SAAS,yBAAyB;AAGlC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AA8B7B,SACsB,KADtB;AAnBJ,IAAM,qBAAqB,CAAC,YAA8B;AACxD,SAAQ,QAA6C,OAAO;AAC9D;AAEO,IAAM,+BAA4D,CAAC;AAAA,EACxE;AAAA,EACA;AACF,MAAM;AACJ,QAAM,MAAM,mBAAmB;AAAA,IAC7B,SAAS,iBAAiB;AAAA,MACxB,SAAS,QAAQ;AAAA,IACnB,CAAC;AAAA,IACD,8BAA8B,QAAQ;AAAA,IACtC,oBAAoB;AAAA,EACtB,CAAC;AAED,QAAM,kBAAkB,mBAAmB,OAAO;AAElD,SACE,qBAAC,qBAAkB,KAChB;AAAA,uBAAmB,oBAAC,mBAAgB;AAAA,IAEpC;AAAA,KACH;AAEJ;AAEO,IAAM,2BAA2B,KAAK,4BAA4B;","names":[]}