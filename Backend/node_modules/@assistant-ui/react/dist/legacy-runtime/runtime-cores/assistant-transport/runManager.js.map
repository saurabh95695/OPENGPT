{"version":3,"sources":["../../../../src/legacy-runtime/runtime-cores/assistant-transport/runManager.ts"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\nimport { useLatestRef } from \"./useLatestRef\";\n\nexport type RunManager = Readonly<{\n  isRunning: boolean;\n  schedule: () => void;\n  cancel: () => void;\n}>;\n\nexport function useRunManager(config: {\n  onRun: (signal: AbortSignal) => Promise<void>;\n  onFinish?: (() => void) | undefined;\n  onCancel?: (() => void) | undefined;\n  onError?: ((error: Error) => void) | undefined;\n}): RunManager {\n  const [isRunning, setIsRunning] = useState(false);\n  const stateRef = useRef({\n    pending: false,\n    abortController: null as AbortController | null,\n  });\n  const onRunRef = useLatestRef(config.onRun);\n  const onFinishRef = useLatestRef(config.onFinish);\n  const onCancelRef = useLatestRef(config.onCancel);\n  const onErrorRef = useLatestRef(config.onError);\n\n  const startRun = useCallback(() => {\n    setIsRunning(true);\n    stateRef.current.pending = false;\n    const ac = new AbortController();\n    stateRef.current.abortController = ac;\n\n    queueMicrotask(async () => {\n      try {\n        await onRunRef.current(ac.signal);\n      } catch (error) {\n        stateRef.current.pending = false;\n        if (ac.signal.aborted) {\n          onCancelRef.current?.();\n        } else {\n          onErrorRef.current?.(error as Error);\n        }\n      } finally {\n        onFinishRef.current?.();\n        if (stateRef.current.pending) {\n          startRun();\n        } else {\n          setIsRunning(false);\n          stateRef.current.abortController = null;\n        }\n      }\n    });\n  }, [onRunRef, onFinishRef, onErrorRef, onCancelRef]);\n\n  const schedule = useCallback(() => {\n    if (stateRef.current.abortController) {\n      // Coalesce multiple schedules while running into a single follow-up run.\n      stateRef.current.pending = true;\n      return;\n    }\n    startRun();\n  }, [startRun]);\n\n  const cancel = useCallback(() => {\n    stateRef.current.pending = false;\n    stateRef.current.abortController?.abort();\n  }, []);\n\n  return {\n    isRunning,\n    schedule,\n    cancel,\n  };\n}\n"],"mappings":";AAAA,SAAS,aAAa,QAAQ,gBAAgB;AAC9C,SAAS,oBAAoB;AAQtB,SAAS,cAAc,QAKf;AACb,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,KAAK;AAChD,QAAM,WAAW,OAAO;AAAA,IACtB,SAAS;AAAA,IACT,iBAAiB;AAAA,EACnB,CAAC;AACD,QAAM,WAAW,aAAa,OAAO,KAAK;AAC1C,QAAM,cAAc,aAAa,OAAO,QAAQ;AAChD,QAAM,cAAc,aAAa,OAAO,QAAQ;AAChD,QAAM,aAAa,aAAa,OAAO,OAAO;AAE9C,QAAM,WAAW,YAAY,MAAM;AACjC,iBAAa,IAAI;AACjB,aAAS,QAAQ,UAAU;AAC3B,UAAM,KAAK,IAAI,gBAAgB;AAC/B,aAAS,QAAQ,kBAAkB;AAEnC,mBAAe,YAAY;AACzB,UAAI;AACF,cAAM,SAAS,QAAQ,GAAG,MAAM;AAAA,MAClC,SAAS,OAAO;AACd,iBAAS,QAAQ,UAAU;AAC3B,YAAI,GAAG,OAAO,SAAS;AACrB,sBAAY,UAAU;AAAA,QACxB,OAAO;AACL,qBAAW,UAAU,KAAc;AAAA,QACrC;AAAA,MACF,UAAE;AACA,oBAAY,UAAU;AACtB,YAAI,SAAS,QAAQ,SAAS;AAC5B,mBAAS;AAAA,QACX,OAAO;AACL,uBAAa,KAAK;AAClB,mBAAS,QAAQ,kBAAkB;AAAA,QACrC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,UAAU,aAAa,YAAY,WAAW,CAAC;AAEnD,QAAM,WAAW,YAAY,MAAM;AACjC,QAAI,SAAS,QAAQ,iBAAiB;AAEpC,eAAS,QAAQ,UAAU;AAC3B;AAAA,IACF;AACA,aAAS;AAAA,EACX,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,SAAS,YAAY,MAAM;AAC/B,aAAS,QAAQ,UAAU;AAC3B,aAAS,QAAQ,iBAAiB,MAAM;AAAA,EAC1C,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}