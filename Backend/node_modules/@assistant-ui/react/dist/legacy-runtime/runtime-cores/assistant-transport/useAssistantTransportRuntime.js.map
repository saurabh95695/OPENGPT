{"version":3,"sources":["../../../../src/legacy-runtime/runtime-cores/assistant-transport/useAssistantTransportRuntime.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  ReadonlyJSONObject,\n  ReadonlyJSONValue,\n  asAsyncIterableStream,\n} from \"assistant-stream/utils\";\nimport { AppendMessage } from \"../../../types\";\nimport { useExternalStoreRuntime } from \"../external-store/useExternalStoreRuntime\";\nimport { AssistantRuntime } from \"../../runtime/AssistantRuntime\";\nimport { AddToolResultOptions } from \"../core\";\nimport { useState, useRef, useMemo } from \"react\";\nimport {\n  AssistantMessageAccumulator,\n  DataStreamDecoder,\n  unstable_createInitialMessage as createInitialMessage,\n} from \"assistant-stream\";\nimport {\n  AssistantTransportOptions,\n  AddMessageCommand,\n  AddToolResultCommand,\n  UserMessagePart,\n  QueuedCommand,\n} from \"./types\";\nimport { useCommandQueue } from \"./commandQueue\";\nimport { useRunManager } from \"./runManager\";\nimport { useConvertedState } from \"./useConvertedState\";\nimport { useToolInvocations } from \"./useToolInvocations\";\nimport { toAISDKTools, getEnabledTools, createRequestHeaders } from \"./utils\";\nimport { useRemoteThreadListRuntime } from \"../remote-thread-list/useRemoteThreadListRuntime\";\nimport { InMemoryThreadListAdapter } from \"../remote-thread-list/adapter/in-memory\";\n\nconst useAssistantTransportThreadRuntime = <T,>(\n  options: AssistantTransportOptions<T>,\n): AssistantRuntime => {\n  const agentStateRef = useRef(options.initialState);\n  const [, rerender] = useState(0);\n  const resumeFlagRef = useRef(false);\n  const commandQueue = useCommandQueue({\n    onQueue: () => runManager.schedule(),\n  });\n\n  const runManager = useRunManager({\n    onRun: async (signal: AbortSignal) => {\n      const isResume = resumeFlagRef.current;\n      resumeFlagRef.current = false;\n      const commands: QueuedCommand[] = isResume ? [] : commandQueue.flush();\n      if (commands.length === 0 && !isResume)\n        throw new Error(\"No commands to send\");\n\n      const headers = await createRequestHeaders(options.headers);\n      const context = runtime.thread.getModelContext();\n\n      const response = await fetch(\n        isResume ? options.resumeApi! : options.api,\n        {\n          method: \"POST\",\n          headers,\n          body: JSON.stringify({\n            commands,\n            state: agentStateRef.current,\n            system: context.system,\n            tools: context.tools\n              ? toAISDKTools(getEnabledTools(context.tools))\n              : undefined,\n            ...context.callSettings,\n            ...context.config,\n            ...options.body,\n          }),\n          signal,\n        },\n      );\n\n      options.onResponse?.(response);\n\n      if (!response.ok) {\n        throw new Error(`Status ${response.status}: ${await response.text()}`);\n      }\n\n      if (!response.body) {\n        throw new Error(\"Response body is null\");\n      }\n\n      let err: string | undefined;\n      const stream = response.body\n        .pipeThrough(new DataStreamDecoder())\n        .pipeThrough(\n          new AssistantMessageAccumulator({\n            initialMessage: createInitialMessage({\n              unstable_state:\n                (agentStateRef.current as ReadonlyJSONValue) ?? null,\n            }),\n            throttle: isResume,\n            onError: (error) => {\n              err = error;\n            },\n          }),\n        );\n\n      let markedDelivered = false;\n\n      for await (const chunk of asAsyncIterableStream(stream)) {\n        if (chunk.metadata.unstable_state === agentStateRef.current) continue;\n\n        if (!markedDelivered) {\n          commandQueue.markDelivered();\n          markedDelivered = true;\n        }\n\n        agentStateRef.current = chunk.metadata.unstable_state as T;\n        rerender((prev) => prev + 1);\n      }\n\n      if (err) {\n        throw new Error(err);\n      }\n    },\n    onFinish: options.onFinish,\n    onCancel: () => {\n      const cmds = [\n        ...commandQueue.state.inTransit,\n        ...commandQueue.state.queued,\n      ];\n      options.onCancel?.({\n        commands: cmds,\n        updateState: (updater) => {\n          agentStateRef.current = updater(agentStateRef.current);\n          rerender((prev) => prev + 1);\n        },\n      });\n\n      commandQueue.reset();\n    },\n    onError: (error) => {\n      const cmds = [...commandQueue.state.inTransit];\n      options.onError?.(error as Error, {\n        commands: cmds,\n        updateState: (updater) => {\n          agentStateRef.current = updater(agentStateRef.current);\n          rerender((prev) => prev + 1);\n        },\n      });\n      commandQueue.markDelivered();\n    },\n  });\n\n  // Reactive conversion of agent state + connection metadata â†’ UI state\n  const pendingCommands = useMemo(\n    () => [...commandQueue.state.inTransit, ...commandQueue.state.queued],\n    [commandQueue.state],\n  );\n  const converted = useConvertedState(\n    options.converter,\n    agentStateRef.current,\n    pendingCommands,\n    runManager.isRunning,\n  );\n\n  // Create runtime\n  const runtime = useExternalStoreRuntime({\n    messages: converted.messages,\n    state: converted.state,\n    isRunning: converted.isRunning,\n    adapters: options.adapters,\n    onNew: async (message: AppendMessage): Promise<void> => {\n      if (message.role !== \"user\")\n        throw new Error(\"Only user messages are supported\");\n\n      // Convert AppendMessage to AddMessageCommand\n      const parts: UserMessagePart[] = [];\n\n      const content = [\n        ...message.content,\n        ...(message.attachments?.flatMap((a) => a.content) ?? []),\n      ];\n      for (const contentPart of content) {\n        if (contentPart.type === \"text\") {\n          parts.push({ type: \"text\", text: contentPart.text });\n        } else if (contentPart.type === \"image\") {\n          parts.push({ type: \"image\", image: contentPart.image });\n        }\n      }\n\n      const command: AddMessageCommand = {\n        type: \"add-message\",\n        message: {\n          role: \"user\",\n          parts,\n        },\n      };\n\n      commandQueue.enqueue(command);\n    },\n    onCancel: async () => {\n      runManager.cancel();\n      toolInvocations.abort();\n    },\n    onResume: async () => {\n      if (!options.resumeApi)\n        throw new Error(\"Must pass resumeApi to options to resume runs\");\n\n      resumeFlagRef.current = true;\n      runManager.schedule();\n    },\n    onAddToolResult: async (\n      toolOptions: AddToolResultOptions,\n    ): Promise<void> => {\n      const command: AddToolResultCommand = {\n        type: \"add-tool-result\",\n        toolCallId: toolOptions.toolCallId,\n        result: toolOptions.result as ReadonlyJSONObject,\n        toolName: toolOptions.toolName,\n        isError: toolOptions.isError,\n        ...(toolOptions.artifact && { artifact: toolOptions.artifact }),\n      };\n\n      commandQueue.enqueue(command);\n    },\n    onLoadExternalState: async (state) => {\n      agentStateRef.current = state as T;\n      toolInvocations.reset();\n      rerender((prev) => prev + 1);\n    },\n  });\n\n  const toolInvocations = useToolInvocations({\n    state: converted,\n    getTools: () => runtime.thread.getModelContext().tools,\n    onResult: commandQueue.enqueue,\n  });\n\n  return runtime;\n};\n\n/**\n * @alpha This is an experimental API that is subject to change.\n */\nexport const useAssistantTransportRuntime = <T,>(\n  options: AssistantTransportOptions<T>,\n): AssistantRuntime => {\n  const runtime = useRemoteThreadListRuntime({\n    runtimeHook: function RuntimeHook() {\n      return useAssistantTransportThreadRuntime(options);\n    },\n    adapter: new InMemoryThreadListAdapter(),\n  });\n  return runtime;\n};\n"],"mappings":"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","names":[]}