{"version":3,"sources":["../../../../../src/legacy-runtime/runtime-cores/adapters/attachment/CloudFileAttachmentAdapter.ts"],"sourcesContent":["import type { AssistantCloud } from \"assistant-cloud\";\nimport {\n  Attachment,\n  PendingAttachment,\n  CompleteAttachment,\n} from \"../../../../types/AttachmentTypes\";\nimport { ThreadUserMessagePart } from \"../../../../types/MessagePartTypes\";\nimport { AttachmentAdapter } from \"./AttachmentAdapter\";\n\nconst guessAttachmentType = (\n  contentType: string,\n): \"image\" | \"document\" | \"file\" => {\n  if (contentType.startsWith(\"image/\")) return \"image\";\n  if (contentType.startsWith(\"text/\")) return \"document\";\n  return \"file\";\n};\n\nexport class CloudFileAttachmentAdapter implements AttachmentAdapter {\n  public accept = \"*\";\n\n  constructor(private cloud: AssistantCloud) {}\n\n  private uploadedUrls = new Map<string, string>();\n\n  public async *add({\n    file,\n  }: {\n    file: File;\n  }): AsyncGenerator<PendingAttachment, void> {\n    const id = crypto.randomUUID();\n    const type = guessAttachmentType(file.type);\n    let attachment: PendingAttachment = {\n      id,\n      type,\n      name: file.name,\n      contentType: file.type,\n      file,\n      status: { type: \"running\", reason: \"uploading\", progress: 0 },\n    };\n    yield attachment;\n\n    try {\n      const { signedUrl, publicUrl } =\n        await this.cloud.files.generatePresignedUploadUrl({\n          filename: file.name,\n        });\n      await fetch(signedUrl, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          \"Content-Type\": file.type,\n        },\n        mode: \"cors\",\n      });\n      this.uploadedUrls.set(id, publicUrl);\n      attachment = {\n        ...attachment,\n        status: { type: \"requires-action\", reason: \"composer-send\" },\n      };\n      yield attachment;\n    } catch {\n      attachment = {\n        ...attachment,\n        status: { type: \"incomplete\", reason: \"error\" },\n      };\n      yield attachment;\n    }\n  }\n\n  public async remove(attachment: Attachment): Promise<void> {\n    this.uploadedUrls.delete(attachment.id);\n  }\n\n  public async send(\n    attachment: PendingAttachment,\n  ): Promise<CompleteAttachment> {\n    const url = this.uploadedUrls.get(attachment.id);\n    if (!url) throw new Error(\"Attachment not uploaded\");\n    this.uploadedUrls.delete(attachment.id);\n\n    let content: ThreadUserMessagePart[];\n    if (attachment.type === \"image\") {\n      content = [{ type: \"image\", image: url, filename: attachment.name }];\n    } else {\n      content = [\n        {\n          type: \"file\",\n          data: url,\n          mimeType: attachment.contentType,\n          filename: attachment.name,\n        },\n      ];\n    }\n\n    return {\n      ...attachment,\n      status: { type: \"complete\" },\n      content,\n    };\n  }\n}\n"],"mappings":";AASA,IAAM,sBAAsB,CAC1B,gBACkC;AAClC,MAAI,YAAY,WAAW,QAAQ,EAAG,QAAO;AAC7C,MAAI,YAAY,WAAW,OAAO,EAAG,QAAO;AAC5C,SAAO;AACT;AAEO,IAAM,6BAAN,MAA8D;AAAA,EAGnE,YAAoB,OAAuB;AAAvB;AAAA,EAAwB;AAAA,EAFrC,SAAS;AAAA,EAIR,eAAe,oBAAI,IAAoB;AAAA,EAE/C,OAAc,IAAI;AAAA,IAChB;AAAA,EACF,GAE4C;AAC1C,UAAM,KAAK,OAAO,WAAW;AAC7B,UAAM,OAAO,oBAAoB,KAAK,IAAI;AAC1C,QAAI,aAAgC;AAAA,MAClC;AAAA,MACA;AAAA,MACA,MAAM,KAAK;AAAA,MACX,aAAa,KAAK;AAAA,MAClB;AAAA,MACA,QAAQ,EAAE,MAAM,WAAW,QAAQ,aAAa,UAAU,EAAE;AAAA,IAC9D;AACA,UAAM;AAEN,QAAI;AACF,YAAM,EAAE,WAAW,UAAU,IAC3B,MAAM,KAAK,MAAM,MAAM,2BAA2B;AAAA,QAChD,UAAU,KAAK;AAAA,MACjB,CAAC;AACH,YAAM,MAAM,WAAW;AAAA,QACrB,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,UACP,gBAAgB,KAAK;AAAA,QACvB;AAAA,QACA,MAAM;AAAA,MACR,CAAC;AACD,WAAK,aAAa,IAAI,IAAI,SAAS;AACnC,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,QAAQ,EAAE,MAAM,mBAAmB,QAAQ,gBAAgB;AAAA,MAC7D;AACA,YAAM;AAAA,IACR,QAAQ;AACN,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,QAAQ,EAAE,MAAM,cAAc,QAAQ,QAAQ;AAAA,MAChD;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAa,OAAO,YAAuC;AACzD,SAAK,aAAa,OAAO,WAAW,EAAE;AAAA,EACxC;AAAA,EAEA,MAAa,KACX,YAC6B;AAC7B,UAAM,MAAM,KAAK,aAAa,IAAI,WAAW,EAAE;AAC/C,QAAI,CAAC,IAAK,OAAM,IAAI,MAAM,yBAAyB;AACnD,SAAK,aAAa,OAAO,WAAW,EAAE;AAEtC,QAAI;AACJ,QAAI,WAAW,SAAS,SAAS;AAC/B,gBAAU,CAAC,EAAE,MAAM,SAAS,OAAO,KAAK,UAAU,WAAW,KAAK,CAAC;AAAA,IACrE,OAAO;AACL,gBAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU,WAAW;AAAA,UACrB,UAAU,WAAW;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,QAAQ,EAAE,MAAM,WAAW;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AACF;","names":[]}