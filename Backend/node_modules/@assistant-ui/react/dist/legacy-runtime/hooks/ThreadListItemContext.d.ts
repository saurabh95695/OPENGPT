import { ThreadListItemRuntime } from "../runtime/ThreadListItemRuntime";
export declare function useThreadListItemRuntime(options?: {
    optional?: false | undefined;
}): ThreadListItemRuntime;
export declare function useThreadListItemRuntime(options?: {
    optional?: boolean | undefined;
}): ThreadListItemRuntime | null;
export declare const useThreadListItem: {
    (): import("../runtime").ThreadListItemState;
    <TSelected>(selector: (state: import("../runtime").ThreadListItemState) => TSelected): TSelected;
    <TSelected>(selector: ((state: import("../runtime").ThreadListItemState) => TSelected) | undefined): import("../runtime").ThreadListItemState | TSelected;
    (options: {
        optional?: false | undefined;
    }): import("../runtime").ThreadListItemState;
    (options: {
        optional?: boolean | undefined;
    }): import("../runtime").ThreadListItemState | null;
    <TSelected>(options: {
        optional?: false | undefined;
        selector: (state: import("../runtime").ThreadListItemState) => TSelected;
    }): TSelected;
    <TSelected>(options: {
        optional?: false | undefined;
        selector: ((state: import("../runtime").ThreadListItemState) => TSelected) | undefined;
    }): import("../runtime").ThreadListItemState | TSelected;
    <TSelected>(options: {
        optional?: boolean | undefined;
        selector: (state: import("../runtime").ThreadListItemState) => TSelected;
    }): TSelected | null;
    <TSelected>(options: {
        optional?: boolean | undefined;
        selector: ((state: import("../runtime").ThreadListItemState) => TSelected) | undefined;
    }): import("../runtime").ThreadListItemState | TSelected | null;
};
//# sourceMappingURL=ThreadListItemContext.d.ts.map