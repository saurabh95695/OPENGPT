{"version":3,"sources":["../../../src/legacy-runtime/client/ThreadRuntimeClient.ts"],"sourcesContent":["import { ThreadRuntimeEventType } from \"../runtime-cores/core/ThreadRuntimeCore\";\nimport { ThreadRuntime } from \"../runtime/ThreadRuntime\";\nimport {\n  resource,\n  tapInlineResource,\n  tapMemo,\n  tapEffect,\n  RefObject,\n} from \"@assistant-ui/tap\";\nimport { ComposerClient } from \"./ComposerRuntimeClient\";\nimport { MessageClient } from \"./MessageRuntimeClient\";\nimport { tapSubscribable } from \"../util-hooks/tapSubscribable\";\nimport { tapApi } from \"../../utils/tap-store\";\nimport { tapLookupResources } from \"../../client/util-hooks/tapLookupResources\";\nimport { Unsubscribe } from \"../../types\";\nimport { tapEvents } from \"../../client/EventContext\";\nimport { ThreadClientState, ThreadClientApi } from \"../../client/types/Thread\";\n\nconst MessageClientById = resource(\n  ({\n    runtime,\n    id,\n    threadIdRef,\n  }: {\n    runtime: ThreadRuntime;\n    id: string;\n    threadIdRef: RefObject<string>;\n  }) => {\n    const messageRuntime = tapMemo(\n      () => runtime.getMessageById(id),\n      [runtime, id],\n    );\n\n    return tapInlineResource(\n      MessageClient({ runtime: messageRuntime, threadIdRef }),\n    );\n  },\n);\n\nexport const ThreadClient = resource(\n  ({ runtime }: { runtime: ThreadRuntime }) => {\n    const runtimeState = tapSubscribable(runtime);\n\n    const events = tapEvents();\n\n    // Bind thread events to event manager\n    tapEffect(() => {\n      const unsubscribers: Unsubscribe[] = [];\n\n      // Subscribe to thread events\n      const threadEvents: ThreadRuntimeEventType[] = [\n        \"run-start\",\n        \"run-end\",\n        \"initialize\",\n        \"model-context-update\",\n      ];\n\n      for (const event of threadEvents) {\n        const unsubscribe = runtime.unstable_on(event, () => {\n          const threadId = runtime.getState()?.threadId || \"unknown\";\n          events.emit(`thread.${event}`, {\n            threadId,\n          });\n        });\n        unsubscribers.push(unsubscribe);\n      }\n\n      return () => {\n        for (const unsub of unsubscribers) unsub();\n      };\n    }, [runtime]);\n\n    const threadIdRef = tapMemo(\n      () => ({\n        get current() {\n          return runtime.getState()!.threadId;\n        },\n      }),\n      [runtime],\n    );\n\n    const composer = tapInlineResource(\n      ComposerClient({\n        runtime: runtime.composer,\n        threadIdRef,\n      }),\n    );\n\n    const messages = tapLookupResources(\n      runtimeState.messages.map((m) =>\n        MessageClientById(\n          { runtime: runtime, id: m.id, threadIdRef },\n          { key: m.id },\n        ),\n      ),\n    );\n\n    const state = tapMemo<ThreadClientState>(() => {\n      return {\n        isDisabled: runtimeState.isDisabled,\n        isLoading: runtimeState.isLoading,\n        isRunning: runtimeState.isRunning,\n        capabilities: runtimeState.capabilities,\n        state: runtimeState.state,\n        suggestions: runtimeState.suggestions,\n        extras: runtimeState.extras,\n        speech: runtimeState.speech,\n\n        composer: composer.state,\n        messages: messages.state,\n      };\n    }, [runtimeState, messages, composer.state]);\n\n    return tapApi<ThreadClientApi>({\n      getState: () => state,\n\n      composer: composer.api,\n\n      append: runtime.append,\n      startRun: runtime.startRun,\n      unstable_resumeRun: runtime.unstable_resumeRun,\n      cancelRun: runtime.cancelRun,\n      getModelContext: runtime.getModelContext,\n      export: runtime.export,\n      import: runtime.import,\n      reset: runtime.reset,\n      stopSpeaking: runtime.stopSpeaking,\n\n      message: (selector) => {\n        if (\"id\" in selector) {\n          return messages.api({ key: selector.id });\n        } else {\n          return messages.api(selector);\n        }\n      },\n\n      __internal_getRuntime: () => runtime,\n    });\n  },\n);\n"],"mappings":"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","names":[]}