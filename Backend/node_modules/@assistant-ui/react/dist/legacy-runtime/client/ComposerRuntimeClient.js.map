{"version":3,"sources":["../../../src/legacy-runtime/client/ComposerRuntimeClient.ts"],"sourcesContent":["import {\n  resource,\n  tapMemo,\n  tapEffect,\n  RefObject,\n  tapInlineResource,\n} from \"@assistant-ui/tap\";\nimport {\n  ComposerRuntime,\n  EditComposerRuntime,\n} from \"../runtime/ComposerRuntime\";\nimport { Unsubscribe } from \"../../types\";\n\nimport { tapApi } from \"../../utils/tap-store\";\nimport { ComposerRuntimeEventType } from \"../runtime-cores/core/ComposerRuntimeCore\";\nimport { tapEvents } from \"../../client/EventContext\";\nimport {\n  ComposerClientState,\n  ComposerClientApi,\n} from \"../../client/types/Composer\";\nimport { tapLookupResources } from \"../../client/util-hooks/tapLookupResources\";\nimport { AttachmentRuntimeClient } from \"./AttachmentRuntimeClient\";\nimport { tapSubscribable } from \"../util-hooks/tapSubscribable\";\n\nconst ComposerAttachmentClientByIndex = resource(\n  ({ runtime, index }: { runtime: ComposerRuntime; index: number }) => {\n    const attachmentRuntime = tapMemo(\n      () => runtime.getAttachmentByIndex(index),\n      [runtime, index],\n    );\n\n    return tapInlineResource(\n      AttachmentRuntimeClient({\n        runtime: attachmentRuntime,\n      }),\n    );\n  },\n);\n\nexport const ComposerClient = resource(\n  ({\n    threadIdRef,\n    messageIdRef,\n    runtime,\n  }: {\n    threadIdRef: RefObject<string>;\n    messageIdRef?: RefObject<string>;\n    runtime: ComposerRuntime;\n  }) => {\n    const runtimeState = tapSubscribable(runtime);\n    const events = tapEvents();\n\n    // Bind composer events to event manager\n    tapEffect(() => {\n      const unsubscribers: Unsubscribe[] = [];\n\n      // Subscribe to composer events\n      const composerEvents: ComposerRuntimeEventType[] = [\n        \"send\",\n        \"attachment-add\",\n      ];\n\n      for (const event of composerEvents) {\n        const unsubscribe = runtime.unstable_on(event, () => {\n          events.emit(`composer.${event}`, {\n            threadId: threadIdRef.current,\n            ...(messageIdRef && { messageId: messageIdRef.current }),\n          });\n        });\n        unsubscribers.push(unsubscribe);\n      }\n\n      return () => {\n        for (const unsub of unsubscribers) unsub();\n      };\n    }, [runtime, events, threadIdRef, messageIdRef]);\n\n    const attachments = tapLookupResources(\n      runtimeState.attachments.map((_, idx) =>\n        ComposerAttachmentClientByIndex(\n          { runtime: runtime, index: idx },\n          { key: idx },\n        ),\n      ),\n    );\n\n    const state = tapMemo<ComposerClientState>(() => {\n      return {\n        text: runtimeState.text,\n        role: runtimeState.role,\n        attachments: attachments.state,\n        runConfig: runtimeState.runConfig,\n        isEditing: runtimeState.isEditing,\n        canCancel: runtimeState.canCancel,\n        attachmentAccept: runtimeState.attachmentAccept,\n        isEmpty: runtimeState.isEmpty,\n        type: runtimeState.type ?? \"thread\",\n      };\n    }, [runtimeState, attachments.state]);\n\n    return tapApi<ComposerClientApi>({\n      getState: () => state,\n\n      setText: runtime.setText,\n      setRole: runtime.setRole,\n      setRunConfig: runtime.setRunConfig,\n      addAttachment: runtime.addAttachment,\n      reset: runtime.reset,\n\n      clearAttachments: runtime.clearAttachments,\n      send: runtime.send,\n      cancel: runtime.cancel,\n      beginEdit:\n        (runtime as EditComposerRuntime).beginEdit ??\n        (() => {\n          throw new Error(\"beginEdit is not supported in this runtime\");\n        }),\n\n      attachment: (selector) => {\n        if (\"id\" in selector) {\n          return attachments.api({ key: selector.id });\n        } else {\n          return attachments.api(selector);\n        }\n      },\n\n      __internal_getRuntime: () => runtime,\n    });\n  },\n);\n"],"mappings":";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OACK;AAOP,SAAS,cAAc;AAEvB,SAAS,iBAAiB;AAK1B,SAAS,0BAA0B;AACnC,SAAS,+BAA+B;AACxC,SAAS,uBAAuB;AAEhC,IAAM,kCAAkC;AAAA,EACtC,CAAC,EAAE,SAAS,MAAM,MAAmD;AACnE,UAAM,oBAAoB;AAAA,MACxB,MAAM,QAAQ,qBAAqB,KAAK;AAAA,MACxC,CAAC,SAAS,KAAK;AAAA,IACjB;AAEA,WAAO;AAAA,MACL,wBAAwB;AAAA,QACtB,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAM,iBAAiB;AAAA,EAC5B,CAAC;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,EACF,MAIM;AACJ,UAAM,eAAe,gBAAgB,OAAO;AAC5C,UAAM,SAAS,UAAU;AAGzB,cAAU,MAAM;AACd,YAAM,gBAA+B,CAAC;AAGtC,YAAM,iBAA6C;AAAA,QACjD;AAAA,QACA;AAAA,MACF;AAEA,iBAAW,SAAS,gBAAgB;AAClC,cAAM,cAAc,QAAQ,YAAY,OAAO,MAAM;AACnD,iBAAO,KAAK,YAAY,KAAK,IAAI;AAAA,YAC/B,UAAU,YAAY;AAAA,YACtB,GAAI,gBAAgB,EAAE,WAAW,aAAa,QAAQ;AAAA,UACxD,CAAC;AAAA,QACH,CAAC;AACD,sBAAc,KAAK,WAAW;AAAA,MAChC;AAEA,aAAO,MAAM;AACX,mBAAW,SAAS,cAAe,OAAM;AAAA,MAC3C;AAAA,IACF,GAAG,CAAC,SAAS,QAAQ,aAAa,YAAY,CAAC;AAE/C,UAAM,cAAc;AAAA,MAClB,aAAa,YAAY;AAAA,QAAI,CAAC,GAAG,QAC/B;AAAA,UACE,EAAE,SAAkB,OAAO,IAAI;AAAA,UAC/B,EAAE,KAAK,IAAI;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,UAAM,QAAQ,QAA6B,MAAM;AAC/C,aAAO;AAAA,QACL,MAAM,aAAa;AAAA,QACnB,MAAM,aAAa;AAAA,QACnB,aAAa,YAAY;AAAA,QACzB,WAAW,aAAa;AAAA,QACxB,WAAW,aAAa;AAAA,QACxB,WAAW,aAAa;AAAA,QACxB,kBAAkB,aAAa;AAAA,QAC/B,SAAS,aAAa;AAAA,QACtB,MAAM,aAAa,QAAQ;AAAA,MAC7B;AAAA,IACF,GAAG,CAAC,cAAc,YAAY,KAAK,CAAC;AAEpC,WAAO,OAA0B;AAAA,MAC/B,UAAU,MAAM;AAAA,MAEhB,SAAS,QAAQ;AAAA,MACjB,SAAS,QAAQ;AAAA,MACjB,cAAc,QAAQ;AAAA,MACtB,eAAe,QAAQ;AAAA,MACvB,OAAO,QAAQ;AAAA,MAEf,kBAAkB,QAAQ;AAAA,MAC1B,MAAM,QAAQ;AAAA,MACd,QAAQ,QAAQ;AAAA,MAChB,WACG,QAAgC,cAChC,MAAM;AACL,cAAM,IAAI,MAAM,4CAA4C;AAAA,MAC9D;AAAA,MAEF,YAAY,CAAC,aAAa;AACxB,YAAI,QAAQ,UAAU;AACpB,iBAAO,YAAY,IAAI,EAAE,KAAK,SAAS,GAAG,CAAC;AAAA,QAC7C,OAAO;AACL,iBAAO,YAAY,IAAI,QAAQ;AAAA,QACjC;AAAA,MACF;AAAA,MAEA,uBAAuB,MAAM;AAAA,IAC/B,CAAC;AAAA,EACH;AACF;","names":[]}