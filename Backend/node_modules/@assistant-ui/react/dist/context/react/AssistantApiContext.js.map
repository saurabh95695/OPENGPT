{"version":3,"sources":["../../../src/context/react/AssistantApiContext.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  createContext,\n  FC,\n  PropsWithChildren,\n  useContext,\n  useMemo,\n} from \"react\";\n\nimport { ToolUIApi, ToolUIState, ToolUIMeta } from \"../../client/types/ToolUI\";\nimport {\n  MessageClientApi,\n  MessageClientState,\n} from \"../../client/types/Message\";\nimport {\n  ThreadListItemClientApi,\n  ThreadListItemClientState,\n} from \"../../client/types/ThreadListItem\";\nimport {\n  MessagePartClientApi,\n  MessagePartClientState,\n} from \"../../client/types/Part\";\nimport { ThreadClientApi, ThreadClientState } from \"../../client/types/Thread\";\nimport {\n  ComposerClientApi,\n  ComposerClientState,\n} from \"../../client/types/Composer\";\nimport {\n  AttachmentClientApi,\n  AttachmentClientState,\n} from \"../../client/types/Attachment\";\nimport { Unsubscribe } from \"@assistant-ui/tap\";\nimport { ModelContextProvider } from \"../../model-context\";\nimport { AssistantRuntime } from \"../../legacy-runtime/runtime/AssistantRuntime\";\nimport {\n  AssistantEvent,\n  AssistantEventCallback,\n  AssistantEventSelector,\n  normalizeEventSelector,\n} from \"../../types/EventTypes\";\nimport {\n  ThreadListClientApi,\n  ThreadListClientState,\n} from \"../../client/types/ThreadList\";\nimport { ThreadViewportProvider } from \"../providers/ThreadViewportProvider\";\n\nexport type AssistantState = {\n  readonly threads: ThreadListClientState;\n  readonly toolUIs: ToolUIState;\n\n  readonly threadListItem: ThreadListItemClientState;\n  readonly thread: ThreadClientState;\n  readonly composer: ComposerClientState;\n  readonly message: MessageClientState;\n  readonly part: MessagePartClientState;\n  readonly attachment: AttachmentClientState;\n};\n\ntype AssistantApiField<\n  TApi,\n  TMeta extends { source: string | null; query: any },\n> = (() => TApi) & (TMeta | { source: null; query: Record<string, never> });\n\n// Meta types for each API method\ntype ThreadsMeta = {\n  source: \"root\";\n  query: Record<string, never>;\n};\n\ntype ThreadListItemMeta = {\n  source: \"threads\";\n  query:\n    | { type: \"index\"; index: number; archived: boolean }\n    | { type: \"main\" }\n    | { type: \"id\"; id: string };\n};\n\ntype ThreadMeta = {\n  source: \"threads\";\n  query: { type: \"main\" };\n};\n\ntype ComposerMeta = {\n  source: \"message\" | \"thread\";\n  query: Record<string, never>;\n};\n\ntype MessageMeta =\n  | {\n      source: \"thread\";\n      query: { type: \"index\"; index: number };\n    }\n  | {\n      source: \"root\";\n      query: Record<string, never>;\n    };\n\ntype PartMeta = {\n  source: \"message\" | \"root\";\n  query: { type: \"index\"; index: number } | Record<string, never>;\n};\n\ntype AttachmentMeta = {\n  source: \"message\" | \"composer\";\n  query: { type: \"index\"; index: number };\n};\n\nexport type AssistantApi = {\n  threads: AssistantApiField<ThreadListClientApi, ThreadsMeta>;\n  toolUIs: AssistantApiField<ToolUIApi, ToolUIMeta>;\n  threadListItem: AssistantApiField<\n    ThreadListItemClientApi,\n    ThreadListItemMeta\n  >;\n  thread: AssistantApiField<ThreadClientApi, ThreadMeta>;\n  composer: AssistantApiField<ComposerClientApi, ComposerMeta>;\n  message: AssistantApiField<MessageClientApi, MessageMeta>;\n  part: AssistantApiField<MessagePartClientApi, PartMeta>;\n  attachment: AssistantApiField<AttachmentClientApi, AttachmentMeta>;\n\n  subscribe(listener: () => void): Unsubscribe;\n  flushSync(): void;\n\n  on<TEvent extends AssistantEvent>(\n    event: AssistantEventSelector<TEvent>,\n    callback: AssistantEventCallback<TEvent>,\n  ): Unsubscribe;\n\n  // temp\n  registerModelContextProvider(provider: ModelContextProvider): void;\n  /** @internal */\n  __internal_getRuntime(): AssistantRuntime | null;\n};\n\nexport const createAssistantApiField = <\n  TApi,\n  TMeta extends { source: any; query: any },\n>(\n  config: {\n    get: () => TApi;\n  } & (TMeta | { source: null; query: Record<string, never> }),\n): AssistantApiField<TApi, TMeta> => {\n  const fn = config.get as AssistantApiField<TApi, TMeta>;\n  fn.source = config.source;\n  fn.query = config.query;\n  return fn;\n};\n\nconst NO_OP_FN = () => () => {};\n\nconst AssistantApiContext = createContext<AssistantApi>({\n  threads: createAssistantApiField({\n    source: null,\n    query: {},\n    get: () => {\n      throw new Error(\"Threads is only available inside <AssistantProvider />\");\n    },\n  }),\n  toolUIs: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\"ToolUIs is only available inside <AssistantProvider />\");\n    },\n  }),\n  threadListItem: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\n        \"ThreadListItem is only available inside <AssistantProvider />\",\n      );\n    },\n  }),\n  thread: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\"Thread is only available inside <AssistantProvider />\");\n    },\n  }),\n  composer: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\n        \"Composer is only available inside <AssistantProvider />\",\n      );\n    },\n  }),\n  message: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\n        \"Message is only available inside <ThreadPrimitive.Messages />\",\n      );\n    },\n  }),\n  part: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\n        \"Part is only available inside <MessagePrimitive.Parts />\",\n      );\n    },\n  }),\n  attachment: createAssistantApiField({\n    source: null,\n    query: {},\n    get: (): never => {\n      throw new Error(\n        \"Attachment is only available inside <MessagePrimitive.Attachments /> or <ComposerPrimitive.Attachments />\",\n      );\n    },\n  }),\n\n  subscribe: NO_OP_FN,\n  flushSync: NO_OP_FN,\n  on: (selector) => {\n    const { scope } = normalizeEventSelector(selector);\n    throw new Error(`Event scope is not available in this component: ${scope}`);\n  },\n\n  registerModelContextProvider: () => {\n    throw new Error(\n      \"Registering model context providers is only available inside <AssistantProvider />\",\n    );\n  },\n  __internal_getRuntime: () => {\n    return null;\n  },\n});\n\nexport const useAssistantApi = (): AssistantApi => {\n  return useContext(AssistantApiContext);\n};\n\nconst mergeFns = <TArgs extends Array<unknown>>(\n  fn1: (...args: TArgs) => void,\n  fn2: (...args: TArgs) => void,\n) => {\n  if (fn1 === NO_OP_FN) return fn2;\n  if (fn2 === NO_OP_FN) return fn1;\n\n  return (...args: TArgs) => {\n    fn1(...args);\n    fn2(...args);\n  };\n};\n\nconst mergeFnsWithUnsubscribe = <TArgs extends Array<unknown>>(\n  fn1: (...args: TArgs) => Unsubscribe,\n  fn2: (...args: TArgs) => Unsubscribe,\n) => {\n  if (fn1 === NO_OP_FN) return fn2;\n  if (fn2 === NO_OP_FN) return fn1;\n\n  return (...args: TArgs) => {\n    const unsubscribe1 = fn1(...args);\n    const unsubscribe2 = fn2(...args);\n\n    return () => {\n      unsubscribe1();\n      unsubscribe2();\n    };\n  };\n};\n\nconst extendApi = (\n  api: AssistantApi,\n  api2: Partial<AssistantApi>,\n): AssistantApi => {\n  const api2Subscribe = api2.subscribe;\n  const api2FlushSync = api2.flushSync;\n  return {\n    ...api,\n    ...api2,\n    subscribe: mergeFnsWithUnsubscribe(\n      api.subscribe,\n      api2Subscribe ?? NO_OP_FN,\n    ),\n    flushSync: mergeFns(api.flushSync, api2FlushSync ?? NO_OP_FN),\n  };\n};\n\nexport const AssistantProvider: FC<\n  PropsWithChildren<{ api: Partial<AssistantApi> }>\n> = ({ api: api2, children }) => {\n  const api = useAssistantApi();\n  const extendedApi = useMemo(() => extendApi(api, api2), [api, api2]);\n\n  return (\n    <AssistantApiContext.Provider value={extendedApi}>\n      {/* TODO temporarily allow accessing viewport state from outside the viewport */}\n      {/* TODO figure out if this behavior should be deprecated, since it is quite hacky */}\n      <ThreadViewportProvider>{children}</ThreadViewportProvider>\n    </AssistantApiContext.Provider>\n  );\n};\n"],"mappings":"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","names":[]}