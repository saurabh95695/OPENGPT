{"version":3,"sources":["../../../src/context/providers/ThreadListItemProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { useMemo, type FC, type PropsWithChildren } from \"react\";\nimport {\n  AssistantApi,\n  AssistantProvider,\n  useAssistantApi,\n  createAssistantApiField,\n} from \"../react/AssistantApiContext\";\nimport {\n  checkEventScope,\n  normalizeEventSelector,\n} from \"../../types/EventTypes\";\n\nexport const ThreadListItemByIndexProvider: FC<\n  PropsWithChildren<{\n    index: number;\n    archived: boolean;\n  }>\n> = ({ index, archived, children }) => {\n  const api = useAssistantApi();\n\n  const api2 = useMemo(() => {\n    const getItem = () => api.threads().item({ index, archived });\n    return {\n      threadListItem: createAssistantApiField({\n        source: \"threads\",\n        query: { type: \"index\", index, archived },\n        get: () => getItem(),\n      }),\n      on(selector, callback) {\n        const { event, scope } = normalizeEventSelector(selector);\n        if (!checkEventScope(\"thread-list-item\", scope, event))\n          return api.on(selector, callback);\n\n        return api.on({ scope: \"*\", event }, (e) => {\n          if (e.threadId === getItem().getState().id) {\n            callback(e);\n          }\n        });\n      },\n    } satisfies Partial<AssistantApi>;\n  }, [api, index, archived]);\n\n  return <AssistantProvider api={api2}>{children}</AssistantProvider>;\n};\n\nexport const ThreadListItemByIdProvider: FC<\n  PropsWithChildren<{\n    id: string;\n  }>\n> = ({ id, children }) => {\n  const api = useAssistantApi();\n\n  const api2 = useMemo(() => {\n    const getItem = () => api.threads().item({ id });\n    return {\n      threadListItem: createAssistantApiField({\n        source: \"threads\",\n        query: { type: \"id\", id },\n        get: () => getItem(),\n      }),\n      on(selector, callback) {\n        const { event, scope } = normalizeEventSelector(selector);\n        if (!checkEventScope(\"thread-list-item\", scope, event))\n          return api.on(selector, callback);\n\n        return api.on({ scope: \"*\", event }, (e) => {\n          if (e.threadId !== getItem().getState().id) return;\n          callback(e);\n        });\n      },\n    } satisfies Partial<AssistantApi>;\n  }, [api, id]);\n\n  return <AssistantProvider api={api2}>{children}</AssistantProvider>;\n};\n"],"mappings":";;;AAEA,SAAS,eAAgD;AACzD;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAgCE;AA9BF,IAAM,gCAKT,CAAC,EAAE,OAAO,UAAU,SAAS,MAAM;AACrC,QAAM,MAAM,gBAAgB;AAE5B,QAAM,OAAO,QAAQ,MAAM;AACzB,UAAM,UAAU,MAAM,IAAI,QAAQ,EAAE,KAAK,EAAE,OAAO,SAAS,CAAC;AAC5D,WAAO;AAAA,MACL,gBAAgB,wBAAwB;AAAA,QACtC,QAAQ;AAAA,QACR,OAAO,EAAE,MAAM,SAAS,OAAO,SAAS;AAAA,QACxC,KAAK,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,MACD,GAAG,UAAU,UAAU;AACrB,cAAM,EAAE,OAAO,MAAM,IAAI,uBAAuB,QAAQ;AACxD,YAAI,CAAC,gBAAgB,oBAAoB,OAAO,KAAK;AACnD,iBAAO,IAAI,GAAG,UAAU,QAAQ;AAElC,eAAO,IAAI,GAAG,EAAE,OAAO,KAAK,MAAM,GAAG,CAAC,MAAM;AAC1C,cAAI,EAAE,aAAa,QAAQ,EAAE,SAAS,EAAE,IAAI;AAC1C,qBAAS,CAAC;AAAA,UACZ;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,GAAG,CAAC,KAAK,OAAO,QAAQ,CAAC;AAEzB,SAAO,oBAAC,qBAAkB,KAAK,MAAO,UAAS;AACjD;AAEO,IAAM,6BAIT,CAAC,EAAE,IAAI,SAAS,MAAM;AACxB,QAAM,MAAM,gBAAgB;AAE5B,QAAM,OAAO,QAAQ,MAAM;AACzB,UAAM,UAAU,MAAM,IAAI,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC;AAC/C,WAAO;AAAA,MACL,gBAAgB,wBAAwB;AAAA,QACtC,QAAQ;AAAA,QACR,OAAO,EAAE,MAAM,MAAM,GAAG;AAAA,QACxB,KAAK,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,MACD,GAAG,UAAU,UAAU;AACrB,cAAM,EAAE,OAAO,MAAM,IAAI,uBAAuB,QAAQ;AACxD,YAAI,CAAC,gBAAgB,oBAAoB,OAAO,KAAK;AACnD,iBAAO,IAAI,GAAG,UAAU,QAAQ;AAElC,eAAO,IAAI,GAAG,EAAE,OAAO,KAAK,MAAM,GAAG,CAAC,MAAM;AAC1C,cAAI,EAAE,aAAa,QAAQ,EAAE,SAAS,EAAE,GAAI;AAC5C,mBAAS,CAAC;AAAA,QACZ,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,GAAG,CAAC,KAAK,EAAE,CAAC;AAEZ,SAAO,oBAAC,qBAAkB,KAAK,MAAO,UAAS;AACjD;","names":[]}