{"version":3,"sources":["../../../src/model-context/registry/ModelContextRegistry.ts"],"sourcesContent":["import { Tool } from \"assistant-stream\";\nimport {\n  ModelContext,\n  ModelContextProvider,\n  mergeModelContexts,\n} from \"../../model-context/ModelContextTypes\";\nimport { Unsubscribe } from \"../../types/Unsubscribe\";\nimport {\n  ModelContextRegistryToolHandle,\n  ModelContextRegistryInstructionHandle,\n  ModelContextRegistryProviderHandle,\n} from \"./ModelContextRegistryHandles\";\nimport type { AssistantToolProps } from \"../../model-context/useAssistantTool\";\nimport type { AssistantInstructionsConfig } from \"../../model-context/useAssistantInstructions\";\n\nexport class ModelContextRegistry implements ModelContextProvider {\n  private _tools = new Map<symbol, AssistantToolProps<any, any>>();\n  private _instructions = new Map<symbol, string>();\n  private _providers = new Map<symbol, ModelContextProvider>();\n  private _subscribers = new Set<() => void>();\n  private _providerUnsubscribes = new Map<symbol, Unsubscribe | undefined>();\n\n  getModelContext(): ModelContext {\n    // Merge instructions\n    const instructions = Array.from(this._instructions.values()).filter(\n      Boolean,\n    );\n\n    const system =\n      instructions.length > 0 ? instructions.join(\"\\n\\n\") : undefined;\n\n    // Collect tools\n    const tools: Record<string, Tool<any, any>> = {};\n    for (const toolProps of this._tools.values()) {\n      const { toolName, render, ...tool } = toolProps;\n      tools[toolName] = tool;\n    }\n\n    // Merge provider contexts\n    const providerContexts = mergeModelContexts(\n      new Set(this._providers.values()),\n    );\n\n    // Combine everything\n    const context: ModelContext = {\n      system,\n      tools: Object.keys(tools).length > 0 ? tools : undefined,\n    };\n\n    // Merge with provider contexts\n    if (providerContexts.system) {\n      context.system = context.system\n        ? `${context.system}\\n\\n${providerContexts.system}`\n        : providerContexts.system;\n    }\n\n    if (providerContexts.tools) {\n      context.tools = { ...(context.tools || {}), ...providerContexts.tools };\n    }\n\n    if (providerContexts.callSettings) {\n      context.callSettings = providerContexts.callSettings;\n    }\n\n    if (providerContexts.config) {\n      context.config = providerContexts.config;\n    }\n\n    return context;\n  }\n\n  subscribe(callback: () => void): Unsubscribe {\n    this._subscribers.add(callback);\n    return () => this._subscribers.delete(callback);\n  }\n\n  private notifySubscribers(): void {\n    for (const callback of this._subscribers) {\n      callback();\n    }\n  }\n\n  addTool<TArgs extends Record<string, unknown>, TResult>(\n    tool: AssistantToolProps<TArgs, TResult>,\n  ): ModelContextRegistryToolHandle<TArgs, TResult> {\n    const id = Symbol();\n\n    this._tools.set(id, tool);\n    this.notifySubscribers();\n\n    return {\n      update: (newTool: AssistantToolProps<TArgs, TResult>) => {\n        if (this._tools.has(id)) {\n          this._tools.set(id, newTool);\n          this.notifySubscribers();\n        }\n      },\n      remove: () => {\n        this._tools.delete(id);\n        this.notifySubscribers();\n      },\n    };\n  }\n\n  addInstruction(\n    config: string | AssistantInstructionsConfig,\n  ): ModelContextRegistryInstructionHandle {\n    const id = Symbol();\n\n    const instruction =\n      typeof config === \"string\" ? config : config.instruction;\n    const disabled = typeof config === \"object\" ? config.disabled : false;\n\n    if (!disabled) {\n      this._instructions.set(id, instruction);\n      this.notifySubscribers();\n    }\n\n    return {\n      update: (newConfig: string | AssistantInstructionsConfig) => {\n        const newInstruction =\n          typeof newConfig === \"string\" ? newConfig : newConfig.instruction;\n        const newDisabled =\n          typeof newConfig === \"object\" ? newConfig.disabled : false;\n\n        if (newDisabled) {\n          this._instructions.delete(id);\n        } else {\n          this._instructions.set(id, newInstruction);\n        }\n        this.notifySubscribers();\n      },\n      remove: () => {\n        this._instructions.delete(id);\n        this.notifySubscribers();\n      },\n    };\n  }\n\n  addProvider(\n    provider: ModelContextProvider,\n  ): ModelContextRegistryProviderHandle {\n    const id = Symbol();\n\n    this._providers.set(id, provider);\n\n    // Subscribe to provider changes\n    const unsubscribe = provider.subscribe?.(() => {\n      this.notifySubscribers();\n    });\n    this._providerUnsubscribes.set(id, unsubscribe);\n\n    this.notifySubscribers();\n\n    return {\n      remove: () => {\n        this._providers.delete(id);\n        const unsubscribe = this._providerUnsubscribes.get(id);\n        unsubscribe?.();\n        this._providerUnsubscribes.delete(id);\n        this.notifySubscribers();\n      },\n    };\n  }\n}\n"],"mappings":"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","names":["unsubscribe"]}