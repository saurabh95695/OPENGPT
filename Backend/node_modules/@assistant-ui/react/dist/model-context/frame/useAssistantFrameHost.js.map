{"version":3,"sources":["../../../src/model-context/frame/useAssistantFrameHost.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, RefObject } from \"react\";\nimport { AssistantFrameHost } from \"./AssistantFrameHost\";\nimport { Unsubscribe } from \"../../types\";\n\ntype UseAssistantFrameHostOptions = {\n  iframeRef: Readonly<RefObject<HTMLIFrameElement | null | undefined>>;\n  targetOrigin?: string;\n  register: (frameHost: AssistantFrameHost) => Unsubscribe;\n};\n\n/**\n * React hook that manages the lifecycle of an AssistantFrameHost and its binding to the current AssistantRuntime.\n *\n * Usage example:\n * ```typescript\n * function MyComponent() {\n *   const iframeRef = useRef<HTMLIFrameElement>(null);\n *\n *   useAssistantFrameHost({\n *     iframeRef,\n *     targetOrigin: \"https://trusted-domain.com\", // optional\n *   });\n *\n *   return <iframe ref={iframeRef} src=\"...\" />;\n * }\n * ```\n */\nexport const useAssistantFrameHost = ({\n  iframeRef,\n  targetOrigin = \"*\",\n  register,\n}: UseAssistantFrameHostOptions): void => {\n  useEffect(() => {\n    const iframeWindow = iframeRef.current?.contentWindow;\n    if (!iframeWindow) return;\n\n    const frameHost = new AssistantFrameHost(iframeWindow, targetOrigin);\n\n    const unsubscribe = register(frameHost);\n\n    return () => {\n      frameHost.dispose();\n      unsubscribe();\n    };\n  }, [iframeRef, targetOrigin, register]);\n};\n"],"mappings":";;;AAEA,SAAS,iBAA4B;AACrC,SAAS,0BAA0B;AA0B5B,IAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA,eAAe;AAAA,EACf;AACF,MAA0C;AACxC,YAAU,MAAM;AACd,UAAM,eAAe,UAAU,SAAS;AACxC,QAAI,CAAC,aAAc;AAEnB,UAAM,YAAY,IAAI,mBAAmB,cAAc,YAAY;AAEnE,UAAM,cAAc,SAAS,SAAS;AAEtC,WAAO,MAAM;AACX,gBAAU,QAAQ;AAClB,kBAAY;AAAA,IACd;AAAA,EACF,GAAG,CAAC,WAAW,cAAc,QAAQ,CAAC;AACxC;","names":[]}