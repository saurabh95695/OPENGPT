{"version":3,"sources":["../../../src/model-context/frame/AssistantFrameHost.ts"],"sourcesContent":["import {\n  ModelContextProvider,\n  ModelContext,\n} from \"../../model-context/ModelContextTypes\";\nimport { Unsubscribe } from \"../../types/Unsubscribe\";\nimport { Tool } from \"assistant-stream\";\nimport {\n  FrameMessage,\n  FRAME_MESSAGE_CHANNEL,\n  SerializedModelContext,\n  SerializedTool,\n} from \"./AssistantFrameTypes\";\n\n/**\n * Deserializes tools from JSON Schema format back to Tool objects\n */\nconst deserializeTool = (serializedTool: SerializedTool): Tool<any, any> =>\n  ({\n    parameters: serializedTool.parameters,\n    ...(serializedTool.description && {\n      description: serializedTool.description,\n    }),\n    ...(serializedTool.disabled !== undefined && {\n      disabled: serializedTool.disabled,\n    }),\n    ...(serializedTool.type && { type: serializedTool.type }),\n  }) as Tool<any, any>;\n\n/**\n * Deserializes a ModelContext from transmission format\n */\nconst deserializeModelContext = (\n  serialized: SerializedModelContext,\n): ModelContext => ({\n  ...(serialized.system !== undefined && { system: serialized.system }),\n  ...(serialized.tools && {\n    tools: Object.fromEntries(\n      Object.entries(serialized.tools).map(([name, tool]) => [\n        name,\n        deserializeTool(tool),\n      ]),\n    ),\n  }),\n});\n\n/**\n * AssistantFrameHost - Runs in the parent window and acts as a ModelContextProvider\n * that receives context from an iframe's AssistantFrameProvider.\n *\n * Usage example:\n * ```typescript\n * // In parent window\n * const frameHost = new AssistantFrameHost(iframeWindow);\n *\n * // Register with assistant runtime\n * const runtime = useAssistantRuntime();\n * runtime.registerModelContextProvider(frameHost);\n *\n * // The assistant now has access to tools from the iframe\n * ```\n */\nexport class AssistantFrameHost implements ModelContextProvider {\n  private _context: ModelContext = {};\n  private _subscribers = new Set<() => void>();\n  private _pendingRequests = new Map<\n    string,\n    {\n      resolve: (value: any) => void;\n      reject: (error: any) => void;\n    }\n  >();\n  private _requestCounter = 0;\n  private _iframeWindow: Window;\n  private _targetOrigin: string;\n\n  constructor(iframeWindow: Window, targetOrigin: string = \"*\") {\n    this._iframeWindow = iframeWindow;\n    this._targetOrigin = targetOrigin;\n\n    this.handleMessage = this.handleMessage.bind(this);\n    window.addEventListener(\"message\", this.handleMessage);\n\n    // Request initial context\n    this.requestContext();\n  }\n\n  private handleMessage(event: MessageEvent) {\n    // Security: Validate origin and source\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin)\n      return;\n    if (event.source !== this._iframeWindow) return;\n    if (event.data?.channel !== FRAME_MESSAGE_CHANNEL) return;\n\n    const message = event.data.message as FrameMessage;\n\n    switch (message.type) {\n      case \"model-context-update\": {\n        this.updateContext(message.context);\n        break;\n      }\n\n      case \"tool-result\": {\n        const pending = this._pendingRequests.get(message.id);\n        if (pending) {\n          if (message.error) {\n            pending.reject(new Error(message.error));\n          } else {\n            pending.resolve(message.result);\n          }\n          this._pendingRequests.delete(message.id);\n        }\n        break;\n      }\n    }\n  }\n\n  private updateContext(serializedContext: SerializedModelContext) {\n    const context = deserializeModelContext(serializedContext);\n    this._context = {\n      ...context,\n      tools:\n        context.tools &&\n        Object.fromEntries(\n          Object.entries(context.tools).map(([name, tool]) => [\n            name,\n            {\n              ...tool,\n              execute: (args: any) => this.callTool(name, args),\n            } as Tool<any, any>,\n          ]),\n        ),\n    };\n    this.notifySubscribers();\n  }\n\n  private callTool(toolName: string, args: any): Promise<any> {\n    return this.sendRequest(\n      {\n        type: \"tool-call\",\n        id: `tool-${this._requestCounter++}`,\n        toolName,\n        args,\n      },\n      30000,\n      `Tool call \"${toolName}\" timed out`,\n    );\n  }\n\n  private sendRequest<T extends FrameMessage & { id: string }>(\n    message: T,\n    timeout = 30000,\n    timeoutMessage = \"Request timed out\",\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._pendingRequests.set(message.id, { resolve, reject });\n\n      this._iframeWindow.postMessage(\n        { channel: FRAME_MESSAGE_CHANNEL, message },\n        this._targetOrigin,\n      );\n\n      const timeoutId = setTimeout(() => {\n        const pending = this._pendingRequests.get(message.id);\n        if (pending) {\n          pending.reject(new Error(timeoutMessage));\n          this._pendingRequests.delete(message.id);\n        }\n      }, timeout);\n\n      // Store original resolve/reject with timeout cleanup\n      const originalResolve = this._pendingRequests.get(message.id)!.resolve;\n      const originalReject = this._pendingRequests.get(message.id)!.reject;\n\n      this._pendingRequests.set(message.id, {\n        resolve: (value: any) => {\n          clearTimeout(timeoutId);\n          originalResolve(value);\n        },\n        reject: (error: any) => {\n          clearTimeout(timeoutId);\n          originalReject(error);\n        },\n      });\n    });\n  }\n\n  private requestContext() {\n    // Request current context from iframe\n    this._iframeWindow.postMessage(\n      {\n        channel: FRAME_MESSAGE_CHANNEL,\n        message: {\n          type: \"model-context-request\",\n        } as FrameMessage,\n      },\n      this._targetOrigin,\n    );\n  }\n\n  private notifySubscribers() {\n    this._subscribers.forEach((callback) => callback());\n  }\n\n  getModelContext(): ModelContext {\n    return this._context;\n  }\n\n  subscribe(callback: () => void): Unsubscribe {\n    this._subscribers.add(callback);\n    return () => this._subscribers.delete(callback);\n  }\n\n  dispose() {\n    window.removeEventListener(\"message\", this.handleMessage);\n    this._subscribers.clear();\n    this._pendingRequests.clear();\n  }\n}\n"],"mappings":";AAMA;AAAA,EAEE;AAAA,OAGK;AAKP,IAAM,kBAAkB,CAAC,oBACtB;AAAA,EACC,YAAY,eAAe;AAAA,EAC3B,GAAI,eAAe,eAAe;AAAA,IAChC,aAAa,eAAe;AAAA,EAC9B;AAAA,EACA,GAAI,eAAe,aAAa,UAAa;AAAA,IAC3C,UAAU,eAAe;AAAA,EAC3B;AAAA,EACA,GAAI,eAAe,QAAQ,EAAE,MAAM,eAAe,KAAK;AACzD;AAKF,IAAM,0BAA0B,CAC9B,gBACkB;AAAA,EAClB,GAAI,WAAW,WAAW,UAAa,EAAE,QAAQ,WAAW,OAAO;AAAA,EACnE,GAAI,WAAW,SAAS;AAAA,IACtB,OAAO,OAAO;AAAA,MACZ,OAAO,QAAQ,WAAW,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM;AAAA,QACrD;AAAA,QACA,gBAAgB,IAAI;AAAA,MACtB,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAkBO,IAAM,qBAAN,MAAyD;AAAA,EACtD,WAAyB,CAAC;AAAA,EAC1B,eAAe,oBAAI,IAAgB;AAAA,EACnC,mBAAmB,oBAAI,IAM7B;AAAA,EACM,kBAAkB;AAAA,EAClB;AAAA,EACA;AAAA,EAER,YAAY,cAAsB,eAAuB,KAAK;AAC5D,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAErB,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,WAAO,iBAAiB,WAAW,KAAK,aAAa;AAGrD,SAAK,eAAe;AAAA,EACtB;AAAA,EAEQ,cAAc,OAAqB;AAEzC,QAAI,KAAK,kBAAkB,OAAO,MAAM,WAAW,KAAK;AACtD;AACF,QAAI,MAAM,WAAW,KAAK,cAAe;AACzC,QAAI,MAAM,MAAM,YAAY,sBAAuB;AAEnD,UAAM,UAAU,MAAM,KAAK;AAE3B,YAAQ,QAAQ,MAAM;AAAA,MACpB,KAAK,wBAAwB;AAC3B,aAAK,cAAc,QAAQ,OAAO;AAClC;AAAA,MACF;AAAA,MAEA,KAAK,eAAe;AAClB,cAAM,UAAU,KAAK,iBAAiB,IAAI,QAAQ,EAAE;AACpD,YAAI,SAAS;AACX,cAAI,QAAQ,OAAO;AACjB,oBAAQ,OAAO,IAAI,MAAM,QAAQ,KAAK,CAAC;AAAA,UACzC,OAAO;AACL,oBAAQ,QAAQ,QAAQ,MAAM;AAAA,UAChC;AACA,eAAK,iBAAiB,OAAO,QAAQ,EAAE;AAAA,QACzC;AACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,cAAc,mBAA2C;AAC/D,UAAM,UAAU,wBAAwB,iBAAiB;AACzD,SAAK,WAAW;AAAA,MACd,GAAG;AAAA,MACH,OACE,QAAQ,SACR,OAAO;AAAA,QACL,OAAO,QAAQ,QAAQ,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM;AAAA,UAClD;AAAA,UACA;AAAA,YACE,GAAG;AAAA,YACH,SAAS,CAAC,SAAc,KAAK,SAAS,MAAM,IAAI;AAAA,UAClD;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACJ;AACA,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEQ,SAAS,UAAkB,MAAyB;AAC1D,WAAO,KAAK;AAAA,MACV;AAAA,QACE,MAAM;AAAA,QACN,IAAI,QAAQ,KAAK,iBAAiB;AAAA,QAClC;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,MACA,cAAc,QAAQ;AAAA,IACxB;AAAA,EACF;AAAA,EAEQ,YACN,SACA,UAAU,KACV,iBAAiB,qBACH;AACd,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAS,OAAO,CAAC;AAEzD,WAAK,cAAc;AAAA,QACjB,EAAE,SAAS,uBAAuB,QAAQ;AAAA,QAC1C,KAAK;AAAA,MACP;AAEA,YAAM,YAAY,WAAW,MAAM;AACjC,cAAM,UAAU,KAAK,iBAAiB,IAAI,QAAQ,EAAE;AACpD,YAAI,SAAS;AACX,kBAAQ,OAAO,IAAI,MAAM,cAAc,CAAC;AACxC,eAAK,iBAAiB,OAAO,QAAQ,EAAE;AAAA,QACzC;AAAA,MACF,GAAG,OAAO;AAGV,YAAM,kBAAkB,KAAK,iBAAiB,IAAI,QAAQ,EAAE,EAAG;AAC/D,YAAM,iBAAiB,KAAK,iBAAiB,IAAI,QAAQ,EAAE,EAAG;AAE9D,WAAK,iBAAiB,IAAI,QAAQ,IAAI;AAAA,QACpC,SAAS,CAAC,UAAe;AACvB,uBAAa,SAAS;AACtB,0BAAgB,KAAK;AAAA,QACvB;AAAA,QACA,QAAQ,CAAC,UAAe;AACtB,uBAAa,SAAS;AACtB,yBAAe,KAAK;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEQ,iBAAiB;AAEvB,SAAK,cAAc;AAAA,MACjB;AAAA,QACE,SAAS;AAAA,QACT,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,KAAK;AAAA,IACP;AAAA,EACF;AAAA,EAEQ,oBAAoB;AAC1B,SAAK,aAAa,QAAQ,CAAC,aAAa,SAAS,CAAC;AAAA,EACpD;AAAA,EAEA,kBAAgC;AAC9B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAU,UAAmC;AAC3C,SAAK,aAAa,IAAI,QAAQ;AAC9B,WAAO,MAAM,KAAK,aAAa,OAAO,QAAQ;AAAA,EAChD;AAAA,EAEA,UAAU;AACR,WAAO,oBAAoB,WAAW,KAAK,aAAa;AACxD,SAAK,aAAa,MAAM;AACxB,SAAK,iBAAiB,MAAM;AAAA,EAC9B;AACF;","names":[]}