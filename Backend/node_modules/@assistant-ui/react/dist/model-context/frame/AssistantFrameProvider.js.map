{"version":3,"sources":["../../../src/model-context/frame/AssistantFrameProvider.ts"],"sourcesContent":["import {\n  ModelContextProvider,\n  ModelContext,\n} from \"../../model-context/ModelContextTypes\";\nimport { Unsubscribe } from \"../../types/Unsubscribe\";\nimport { Tool } from \"assistant-stream\";\nimport { z } from \"zod\";\nimport {\n  FrameMessage,\n  FRAME_MESSAGE_CHANNEL,\n  SerializedModelContext,\n  SerializedTool,\n} from \"./AssistantFrameTypes\";\n\n/**\n * Converts tools to JSON Schema format for serialization\n */\nconst serializeTool = (tool: Tool<any, any>): SerializedTool => ({\n  ...(tool.description && { description: tool.description }),\n  parameters:\n    tool.parameters instanceof z.ZodType\n      ? ((z as any).toJSONSchema?.(tool.parameters) ?? tool.parameters)\n      : tool.parameters,\n  ...(tool.disabled !== undefined && { disabled: tool.disabled }),\n  ...(tool.type && { type: tool.type }),\n});\n\n/**\n * Serializes a ModelContext for transmission across iframe boundary\n */\nconst serializeModelContext = (\n  context: ModelContext,\n): SerializedModelContext => ({\n  ...(context.system !== undefined && { system: context.system }),\n  ...(context.tools && {\n    tools: Object.fromEntries(\n      Object.entries(context.tools).map(([name, tool]) => [\n        name,\n        serializeTool(tool),\n      ]),\n    ),\n  }),\n});\n\n/**\n * AssistantFrameProvider - Runs inside an iframe and provides ModelContextProviders\n * to the parent window's AssistantFrameHost.\n *\n * Usage example:\n * ```typescript\n * // Inside the iframe\n * // Add model context providers\n * const registry = new ModelContextRegistry();\n * AssistantFrameProvider.addModelContextProvider(registry);\n *\n * // Add tools to registry\n * registry.addTool({\n *   toolName: \"search\",\n *   description: \"Search the web\",\n *   parameters: z.object({ query: z.string() }),\n *   execute: async (args) => {\n *     // Tool implementation runs in iframe\n *     return { results: [\"...\"] };\n *   }\n * });\n * ```\n */\nexport class AssistantFrameProvider {\n  private static _instance: AssistantFrameProvider | null = null;\n\n  private _providers = new Set<ModelContextProvider>();\n  private _providerUnsubscribes = new Map<\n    ModelContextProvider,\n    Unsubscribe | undefined\n  >();\n  private _targetOrigin: string;\n\n  private constructor(targetOrigin: string = \"*\") {\n    this._targetOrigin = targetOrigin;\n    this.handleMessage = this.handleMessage.bind(this);\n    window.addEventListener(\"message\", this.handleMessage);\n\n    // Send initial update on initialization\n    setTimeout(() => this.broadcastUpdate(), 0);\n  }\n\n  private static getInstance(targetOrigin?: string): AssistantFrameProvider {\n    if (!AssistantFrameProvider._instance) {\n      AssistantFrameProvider._instance = new AssistantFrameProvider(\n        targetOrigin,\n      );\n    }\n    return AssistantFrameProvider._instance;\n  }\n\n  private handleMessage(event: MessageEvent) {\n    // Security: Validate origin if specified\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin)\n      return;\n    if (event.data?.channel !== FRAME_MESSAGE_CHANNEL) return;\n\n    const message = event.data.message as FrameMessage;\n\n    switch (message.type) {\n      case \"model-context-request\":\n        // Respond with current context\n        this.sendMessage(event, {\n          type: \"model-context-update\",\n          context: serializeModelContext(this.getModelContext()),\n        });\n        break;\n\n      case \"tool-call\":\n        this.handleToolCall(message, event);\n        break;\n    }\n  }\n\n  private async handleToolCall(\n    message: Extract<FrameMessage, { type: \"tool-call\" }>,\n    event: MessageEvent,\n  ) {\n    const tool = this.getModelContext().tools?.[message.toolName];\n\n    let result: any;\n    let error: string | undefined;\n\n    if (!tool) {\n      error = `Tool \"${message.toolName}\" not found`;\n    } else {\n      try {\n        result = tool.execute\n          ? await tool.execute(message.args, {\n              toolCallId: message.id,\n              abortSignal: new AbortController().signal,\n            })\n          : undefined;\n      } catch (e) {\n        error = e instanceof Error ? e.message : String(e);\n      }\n    }\n\n    this.sendMessage(event, {\n      type: \"tool-result\",\n      id: message.id,\n      ...(error ? { error } : { result }),\n    });\n  }\n\n  private sendMessage(event: MessageEvent, message: FrameMessage) {\n    event.source?.postMessage(\n      { channel: FRAME_MESSAGE_CHANNEL, message },\n      { targetOrigin: event.origin },\n    );\n  }\n\n  private getModelContext(): ModelContext {\n    const contexts = Array.from(this._providers).map((p) =>\n      p.getModelContext(),\n    );\n\n    return contexts.reduce(\n      (merged, context) => ({\n        system: context.system\n          ? merged.system\n            ? `${merged.system}\\n\\n${context.system}`\n            : context.system\n          : merged.system,\n        tools: { ...(merged.tools || {}), ...(context.tools || {}) },\n      }),\n      {} as ModelContext,\n    );\n  }\n\n  private broadcastUpdate() {\n    // Always broadcast to parent window\n    if (window.parent && window.parent !== window) {\n      const updateMessage: FrameMessage = {\n        type: \"model-context-update\",\n        context: serializeModelContext(this.getModelContext()),\n      };\n\n      window.parent.postMessage(\n        { channel: FRAME_MESSAGE_CHANNEL, message: updateMessage },\n        this._targetOrigin,\n      );\n    }\n  }\n\n  static addModelContextProvider(\n    provider: ModelContextProvider,\n    targetOrigin?: string,\n  ): Unsubscribe {\n    const instance = AssistantFrameProvider.getInstance(targetOrigin);\n    instance._providers.add(provider);\n\n    const unsubscribe = provider.subscribe?.(() => instance.broadcastUpdate());\n    if (unsubscribe) {\n      instance._providerUnsubscribes.set(provider, unsubscribe);\n    }\n\n    instance.broadcastUpdate();\n\n    return () => {\n      instance._providers.delete(provider);\n      instance._providerUnsubscribes.get(provider)?.();\n      instance._providerUnsubscribes.delete(provider);\n      instance.broadcastUpdate();\n    };\n  }\n\n  static dispose() {\n    if (AssistantFrameProvider._instance) {\n      const instance = AssistantFrameProvider._instance;\n      window.removeEventListener(\"message\", instance.handleMessage);\n\n      // Unsubscribe from all providers\n      instance._providerUnsubscribes.forEach((unsubscribe) => unsubscribe?.());\n      instance._providerUnsubscribes.clear();\n      instance._providers.clear();\n\n      AssistantFrameProvider._instance = null;\n    }\n  }\n}\n"],"mappings":"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","names":[]}