{"version":3,"sources":["../../src/client/AssistantClient.ts"],"sourcesContent":["import {\n  tapMemo,\n  resource,\n  Unsubscribe,\n  tapInlineResource,\n  ResourceElement,\n  tapResource,\n} from \"@assistant-ui/tap\";\nimport { ThreadListClientApi, ThreadListClientState } from \"./types/ThreadList\";\nimport { AssistantRuntime } from \"../legacy-runtime/runtime/AssistantRuntime\";\nimport { ModelContextProvider } from \"../model-context\";\nimport { asStore, Store, tapApi } from \"../utils/tap-store\";\nimport { useResource } from \"@assistant-ui/tap/react\";\nimport { useMemo } from \"react\";\nimport {\n  AssistantEvent,\n  AssistantEventCallback,\n  checkEventScope,\n  normalizeEventSelector,\n} from \"../types/EventTypes\";\nimport { EventManager } from \"../legacy-runtime/client/EventManagerRuntimeClient\";\nimport {\n  AssistantApi,\n  createAssistantApiField,\n} from \"../context/react/AssistantApiContext\";\nimport { ToolUIClient } from \"./ToolUIClient\";\nimport { withEventsProvider } from \"./EventContext\";\nimport { ToolUIApi, ToolUIState } from \"./types/ToolUI\";\n\ntype AssistantClientState = {\n  readonly threads: ThreadListClientState;\n  readonly toolUIs: ToolUIState;\n};\n\ntype AssistantClientApi = {\n  getState(): AssistantClientState;\n\n  readonly threads: ThreadListClientApi;\n  readonly toolUIs: ToolUIApi;\n\n  on<TEvent extends AssistantEvent>(\n    event: TEvent,\n    callback: AssistantEventCallback<TEvent>,\n  ): Unsubscribe;\n\n  registerModelContextProvider(provider: ModelContextProvider): Unsubscribe;\n\n  /** @internal */\n  __internal_getRuntime(): AssistantRuntime | null;\n};\n\nconst AssistantStore = resource(\n  ({\n    threads: threadsEl,\n    registerModelContextProvider,\n    __internal_runtime,\n  }: AssistantClientProps) => {\n    const events = tapInlineResource(EventManager());\n\n    const { threads, toolUIs } = withEventsProvider(events, () => {\n      return {\n        toolUIs: tapInlineResource(ToolUIClient()),\n        threads: tapResource(threadsEl, [threadsEl]),\n      };\n    });\n\n    const state = tapMemo<AssistantClientState>(\n      () => ({\n        threads: threads.state,\n        toolUIs: toolUIs.state,\n      }),\n      [threads.state, toolUIs.state],\n    );\n\n    return tapApi<AssistantClientApi>({\n      getState: () => state,\n\n      threads: threads.api,\n      toolUIs: toolUIs.api,\n      on: events.on,\n\n      registerModelContextProvider: registerModelContextProvider,\n      __internal_getRuntime: () => __internal_runtime ?? null,\n    });\n  },\n);\n\nconst getClientFromStore = (client: Store<{ api: AssistantClientApi }>) => {\n  const getItem = () => {\n    return client.getState().api.threads.item(\"main\");\n  };\n  return {\n    threads: createAssistantApiField({\n      source: \"root\",\n      query: {},\n      get: () => client.getState().api.threads,\n    }),\n    toolUIs: createAssistantApiField({\n      source: \"root\",\n      query: {},\n      get: () => client.getState().api.toolUIs,\n    }),\n    thread: createAssistantApiField({\n      source: \"threads\",\n      query: { type: \"main\" },\n      get: () => client.getState().api.threads.thread(\"main\"),\n    }),\n    threadListItem: createAssistantApiField({\n      source: \"threads\",\n      query: { type: \"main\" },\n      get: () => getItem(),\n    }),\n    composer: createAssistantApiField({\n      source: \"thread\",\n      query: {},\n      get: () => client.getState().api.threads.thread(\"main\").composer,\n    }),\n    registerModelContextProvider(provider: ModelContextProvider) {\n      return client.getState().api.registerModelContextProvider(provider);\n    },\n    __internal_getRuntime() {\n      return client.getState().api.__internal_getRuntime();\n    },\n    on(selector, callback) {\n      const { event, scope } = normalizeEventSelector(selector);\n      if (scope === \"*\") return client.getState().api.on(event, callback);\n\n      if (\n        checkEventScope(\"thread\", scope, event) ||\n        checkEventScope(\"thread-list-item\", scope, event) ||\n        checkEventScope(\"composer\", scope, event)\n      ) {\n        return client.getState().api.on(event, (e) => {\n          if (e.threadId !== getItem().getState().id) return;\n          callback(e);\n        });\n      }\n\n      throw new Error(\n        `Event scope is not available in this component: ${scope}`,\n      );\n    },\n    subscribe: client.subscribe,\n    flushSync: client.flushSync,\n  } satisfies Partial<AssistantApi>;\n};\n\ntype AssistantClientProps = {\n  threads: ResourceElement<{\n    state: ThreadListClientState;\n    api: ThreadListClientApi;\n  }>;\n  registerModelContextProvider: (provider: ModelContextProvider) => Unsubscribe;\n\n  /** @internal */\n  __internal_runtime?: AssistantRuntime;\n};\n\nexport const useAssistantClient = (props: AssistantClientProps) => {\n  const client = useResource(asStore(AssistantStore(props)));\n  return useMemo(() => getClientFromStore(client), [client]);\n};\n"],"mappings":"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","names":[]}