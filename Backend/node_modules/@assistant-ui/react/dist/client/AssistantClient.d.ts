import { Unsubscribe, ResourceElement } from "@assistant-ui/tap";
import { ThreadListClientApi, ThreadListClientState } from "./types/ThreadList";
import { AssistantRuntime } from "../legacy-runtime/runtime/AssistantRuntime";
import { ModelContextProvider } from "../model-context";
import { AssistantEvent, AssistantEventCallback } from "../types/EventTypes";
import { ToolUIApi } from "./types/ToolUI";
type AssistantClientProps = {
    threads: ResourceElement<{
        state: ThreadListClientState;
        api: ThreadListClientApi;
    }>;
    registerModelContextProvider: (provider: ModelContextProvider) => Unsubscribe;
};
export declare const useAssistantClient: (props: AssistantClientProps) => {
    threads: (() => ThreadListClientApi) & ({
        source: null;
        query: Record<string, never>;
    } | {
        source: "root";
        query: {};
        get: () => ThreadListClientApi;
    });
    toolUIs: (() => ToolUIApi) & ({
        source: null;
        query: Record<string, never>;
    } | {
        source: "root";
        query: {};
        get: () => ToolUIApi;
    });
    thread: (() => import("./types/Thread").ThreadClientApi) & ({
        source: null;
        query: Record<string, never>;
    } | {
        source: "threads";
        query: {
            type: "main";
        };
        get: () => import("./types/Thread").ThreadClientApi;
    });
    threadListItem: (() => import("./types/ThreadListItem").ThreadListItemClientApi) & ({
        source: null;
        query: Record<string, never>;
    } | {
        source: "threads";
        query: {
            type: "main";
        };
        get: () => import("./types/ThreadListItem").ThreadListItemClientApi;
    });
    composer: (() => import("./types/Composer").ComposerClientApi) & ({
        source: null;
        query: Record<string, never>;
    } | {
        source: "thread";
        query: {};
        get: () => import("./types/Composer").ComposerClientApi;
    });
    registerModelContextProvider(provider: ModelContextProvider): Unsubscribe;
    __internal_getRuntime(): AssistantRuntime | null;
    on<TEvent extends AssistantEvent>(selector: import("..").AssistantEventSelector<TEvent>, callback: AssistantEventCallback<TEvent>): Unsubscribe;
    subscribe: (listener: () => void) => Unsubscribe;
    flushSync: () => void;
};
export {};
//# sourceMappingURL=AssistantClient.d.ts.map