{"version":3,"sources":["../../../src/primitives/actionBar/useActionBarFloatStatus.tsx"],"sourcesContent":["\"use client\";\n\nimport { useAssistantState } from \"../../context\";\n\nexport enum HideAndFloatStatus {\n  Hidden = \"hidden\",\n  Floating = \"floating\",\n  Normal = \"normal\",\n}\n\nexport type UseActionBarFloatStatusProps = {\n  hideWhenRunning?: boolean | undefined;\n  autohide?: \"always\" | \"not-last\" | \"never\" | undefined;\n  autohideFloat?: \"always\" | \"single-branch\" | \"never\" | undefined;\n};\n\nexport const useActionBarFloatStatus = ({\n  hideWhenRunning,\n  autohide,\n  autohideFloat,\n}: UseActionBarFloatStatusProps) => {\n  return useAssistantState(({ thread, message }) => {\n    if (hideWhenRunning && thread.isRunning) return HideAndFloatStatus.Hidden;\n\n    const autohideEnabled =\n      autohide === \"always\" || (autohide === \"not-last\" && !message.isLast);\n\n    // normal status\n    if (!autohideEnabled) return HideAndFloatStatus.Normal;\n\n    // hidden status\n    if (!message.isHovering) return HideAndFloatStatus.Hidden;\n\n    // floating status\n    if (\n      autohideFloat === \"always\" ||\n      (autohideFloat === \"single-branch\" && message.branchCount <= 1)\n    )\n      return HideAndFloatStatus.Floating;\n\n    return HideAndFloatStatus.Normal;\n  });\n};\n"],"mappings":";;;AAEA,SAAS,yBAAyB;AAE3B,IAAK,qBAAL,kBAAKA,wBAAL;AACL,EAAAA,oBAAA,YAAS;AACT,EAAAA,oBAAA,cAAW;AACX,EAAAA,oBAAA,YAAS;AAHC,SAAAA;AAAA,GAAA;AAYL,IAAM,0BAA0B,CAAC;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AACF,MAAoC;AAClC,SAAO,kBAAkB,CAAC,EAAE,QAAQ,QAAQ,MAAM;AAChD,QAAI,mBAAmB,OAAO,UAAW,QAAO;AAEhD,UAAM,kBACJ,aAAa,YAAa,aAAa,cAAc,CAAC,QAAQ;AAGhE,QAAI,CAAC,gBAAiB,QAAO;AAG7B,QAAI,CAAC,QAAQ,WAAY,QAAO;AAGhC,QACE,kBAAkB,YACjB,kBAAkB,mBAAmB,QAAQ,eAAe;AAE7D,aAAO;AAET,WAAO;AAAA,EACT,CAAC;AACH;","names":["HideAndFloatStatus"]}