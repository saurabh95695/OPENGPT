{"version":3,"sources":["../../../src/primitives/actionBar/ActionBarSpeak.tsx"],"sourcesContent":["\"use client\";\n\nimport { useCallback } from \"react\";\nimport { useAssistantState, useAssistantApi } from \"../../context\";\nimport {\n  ActionButtonElement,\n  ActionButtonProps,\n  createActionButton,\n} from \"../../utils/createActionButton\";\n\nconst useActionBarSpeak = () => {\n  const api = useAssistantApi();\n  const callback = useCallback(async () => {\n    api.message().speak();\n  }, [api]);\n\n  const hasSpeakableContent = useAssistantState(({ message }) => {\n    return (\n      (message.role !== \"assistant\" || message.status?.type !== \"running\") &&\n      message.parts.some((c) => c.type === \"text\" && c.text.length > 0)\n    );\n  });\n\n  if (!hasSpeakableContent) return null;\n  return callback;\n};\n\nexport namespace ActionBarPrimitiveSpeak {\n  export type Element = ActionButtonElement;\n  export type Props = ActionButtonProps<typeof useActionBarSpeak>;\n}\n\nexport const ActionBarPrimitiveSpeak = createActionButton(\n  \"ActionBarPrimitive.Speak\",\n  useActionBarSpeak,\n);\n"],"mappings":";;;AAEA,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,uBAAuB;AACnD;AAAA,EAGE;AAAA,OACK;AAEP,IAAM,oBAAoB,MAAM;AAC9B,QAAM,MAAM,gBAAgB;AAC5B,QAAM,WAAW,YAAY,YAAY;AACvC,QAAI,QAAQ,EAAE,MAAM;AAAA,EACtB,GAAG,CAAC,GAAG,CAAC;AAER,QAAM,sBAAsB,kBAAkB,CAAC,EAAE,QAAQ,MAAM;AAC7D,YACG,QAAQ,SAAS,eAAe,QAAQ,QAAQ,SAAS,cAC1D,QAAQ,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU,EAAE,KAAK,SAAS,CAAC;AAAA,EAEpE,CAAC;AAED,MAAI,CAAC,oBAAqB,QAAO;AACjC,SAAO;AACT;AAOO,IAAM,0BAA0B;AAAA,EACrC;AAAA,EACA;AACF;","names":[]}