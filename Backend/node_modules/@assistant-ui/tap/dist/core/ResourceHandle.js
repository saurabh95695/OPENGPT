// src/core/ResourceHandle.ts
import {
  createResourceFiber,
  unmountResource,
  renderResource,
  commitResource
} from "./ResourceFiber.js";
import { UpdateScheduler } from "./scheduler.js";
import { tapRef } from "../hooks/tap-ref.js";
import { tapState } from "../hooks/tap-state.js";
import { tapMemo } from "../hooks/tap-memo.js";
import { tapInlineResource } from "../hooks/tap-inline-resource.js";
import { tapEffect } from "../hooks/tap-effect.js";
var HandleWrapperResource = ({
  element,
  onUpdateInput,
  onFlushSync,
  onDispose
}) => {
  const [props, setProps] = tapState(element.props);
  const value = tapInlineResource({ type: element.type, props });
  const subscribers = tapRef(/* @__PURE__ */ new Set()).current;
  const valueRef = tapRef(value);
  tapEffect(() => {
    if (value !== valueRef.current) {
      valueRef.current = value;
      subscribers.forEach((callback) => callback());
    }
  });
  const handle = tapMemo(
    () => ({
      getState: () => valueRef.current,
      subscribe: (callback) => {
        subscribers.add(callback);
        return () => subscribers.delete(callback);
      },
      updateInput: (props2) => {
        onUpdateInput();
        setProps(() => props2);
      },
      flushSync: onFlushSync,
      dispose: onDispose
    }),
    []
  );
  return handle;
};
var createResource = (element, delayMount = false) => {
  let isMounted = !delayMount;
  const props = {
    element,
    onUpdateInput: () => {
      if (isMounted) return;
      isMounted = true;
      commitResource(fiber, lastRender);
    },
    onFlushSync: () => {
      scheduler.flushSync();
    },
    onDispose: () => unmountResource(fiber)
  };
  const scheduler = new UpdateScheduler(() => {
    lastRender = renderResource(fiber, props);
    if (isMounted) commitResource(fiber, lastRender);
  });
  const fiber = createResourceFiber(
    HandleWrapperResource,
    () => scheduler.markDirty()
  );
  let lastRender = renderResource(fiber, props);
  if (isMounted) commitResource(fiber, lastRender);
  return lastRender.state;
};
export {
  createResource
};
//# sourceMappingURL=ResourceHandle.js.map