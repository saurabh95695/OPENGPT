{"version":3,"sources":["../../src/core/scheduler.ts"],"sourcesContent":["type Task = () => void;\n\nlet queue: Task[] = [];\nlet isFlushPending = false;\n\nfunction flushQueue() {\n  isFlushPending = false;\n\n  const tasksToRun = queue;\n  queue = [];\n\n  for (const task of tasksToRun) {\n    try {\n      task();\n    } catch (error) {\n      console.error(\"Error in scheduled task:\", error);\n    }\n  }\n}\n\nfunction scheduleUpdate(task: Task) {\n  queue.push(task);\n\n  if (!isFlushPending) {\n    isFlushPending = true;\n    queueMicrotask(flushQueue);\n  }\n}\n\nexport class UpdateScheduler {\n  private _isDirty = false;\n  private _hasScheduledTask = false;\n  private _isFlushing = false;\n  private static readonly MAX_FLUSH_DEPTH = 50;\n\n  constructor(private readonly _task: Task) {}\n\n  get isDirty() {\n    return this._isDirty;\n  }\n\n  markDirty() {\n    this._isDirty = true;\n\n    if (this._hasScheduledTask || this._isFlushing) return;\n    this._hasScheduledTask = true;\n\n    scheduleUpdate(() => {\n      this._hasScheduledTask = false;\n\n      this.flushSync();\n    });\n  }\n\n  flushSync() {\n    if (this._isFlushing) return;\n\n    this._isFlushing = true;\n    let flushDepth = 0;\n\n    try {\n      while (this._isDirty) {\n        flushDepth++;\n\n        if (flushDepth > UpdateScheduler.MAX_FLUSH_DEPTH) {\n          throw new Error(\n            `Maximum update depth exceeded. This can happen when a resource ` +\n              `repeatedly calls setState inside tapEffect.`,\n          );\n        }\n\n        this._isDirty = false;\n        this._task();\n      }\n    } finally {\n      this._isFlushing = false;\n    }\n  }\n}\n"],"mappings":";AAEA,IAAI,QAAgB,CAAC;AACrB,IAAI,iBAAiB;AAErB,SAAS,aAAa;AACpB,mBAAiB;AAEjB,QAAM,aAAa;AACnB,UAAQ,CAAC;AAET,aAAW,QAAQ,YAAY;AAC7B,QAAI;AACF,WAAK;AAAA,IACP,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAAA,IACjD;AAAA,EACF;AACF;AAEA,SAAS,eAAe,MAAY;AAClC,QAAM,KAAK,IAAI;AAEf,MAAI,CAAC,gBAAgB;AACnB,qBAAiB;AACjB,mBAAe,UAAU;AAAA,EAC3B;AACF;AAEO,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAM3B,YAA6B,OAAa;AAAb;AAAA,EAAc;AAAA,EALnC,WAAW;AAAA,EACX,oBAAoB;AAAA,EACpB,cAAc;AAAA,EACtB,OAAwB,kBAAkB;AAAA,EAI1C,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY;AACV,SAAK,WAAW;AAEhB,QAAI,KAAK,qBAAqB,KAAK,YAAa;AAChD,SAAK,oBAAoB;AAEzB,mBAAe,MAAM;AACnB,WAAK,oBAAoB;AAEzB,WAAK,UAAU;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EAEA,YAAY;AACV,QAAI,KAAK,YAAa;AAEtB,SAAK,cAAc;AACnB,QAAI,aAAa;AAEjB,QAAI;AACF,aAAO,KAAK,UAAU;AACpB;AAEA,YAAI,aAAa,iBAAgB,iBAAiB;AAChD,gBAAM,IAAI;AAAA,YACR;AAAA,UAEF;AAAA,QACF;AAEA,aAAK,WAAW;AAChB,aAAK,MAAM;AAAA,MACb;AAAA,IACF,UAAE;AACA,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AACF;","names":[]}