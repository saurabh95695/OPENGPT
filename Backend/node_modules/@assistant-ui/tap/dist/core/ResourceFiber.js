// src/core/ResourceFiber.ts
import { commitRender, cleanupAllEffects } from "./commit.js";
import { withResourceFiber } from "./execution-context.js";
function createResourceFiber(resourceFn, scheduleRerender) {
  return {
    resourceFn,
    scheduleRerender,
    cells: [],
    currentIndex: 0,
    renderContext: void 0,
    isFirstRender: true,
    isMounted: false,
    isNeverMounted: true
  };
}
function unmountResource(fiber) {
  fiber.isMounted = false;
  cleanupAllEffects(fiber);
}
function renderResource(fiber, props) {
  const result = {
    commitTasks: [],
    props,
    state: void 0
  };
  withResourceFiber(fiber, () => {
    fiber.renderContext = result;
    try {
      result.state = fiber.resourceFn(props);
    } finally {
      fiber.renderContext = void 0;
    }
  });
  return result;
}
function commitResource(fiber, result) {
  fiber.isMounted = true;
  fiber.isNeverMounted = false;
  commitRender(result, fiber);
}
export {
  commitResource,
  createResourceFiber,
  renderResource,
  unmountResource
};
//# sourceMappingURL=ResourceFiber.js.map