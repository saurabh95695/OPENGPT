// src/core/scheduler.ts
var queue = [];
var isFlushPending = false;
function flushQueue() {
  isFlushPending = false;
  const tasksToRun = queue;
  queue = [];
  for (const task of tasksToRun) {
    try {
      task();
    } catch (error) {
      console.error("Error in scheduled task:", error);
    }
  }
}
function scheduleUpdate(task) {
  queue.push(task);
  if (!isFlushPending) {
    isFlushPending = true;
    queueMicrotask(flushQueue);
  }
}
var UpdateScheduler = class _UpdateScheduler {
  constructor(_task) {
    this._task = _task;
  }
  _isDirty = false;
  _hasScheduledTask = false;
  _isFlushing = false;
  static MAX_FLUSH_DEPTH = 50;
  get isDirty() {
    return this._isDirty;
  }
  markDirty() {
    this._isDirty = true;
    if (this._hasScheduledTask || this._isFlushing) return;
    this._hasScheduledTask = true;
    scheduleUpdate(() => {
      this._hasScheduledTask = false;
      this.flushSync();
    });
  }
  flushSync() {
    if (this._isFlushing) return;
    this._isFlushing = true;
    let flushDepth = 0;
    try {
      while (this._isDirty) {
        flushDepth++;
        if (flushDepth > _UpdateScheduler.MAX_FLUSH_DEPTH) {
          throw new Error(
            `Maximum update depth exceeded. This can happen when a resource repeatedly calls setState inside tapEffect.`
          );
        }
        this._isDirty = false;
        this._task();
      }
    } finally {
      this._isFlushing = false;
    }
  }
};
export {
  UpdateScheduler
};
//# sourceMappingURL=scheduler.js.map