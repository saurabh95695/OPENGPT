import { ResourceFn, ResourceFiber } from "../core/types";
/**
 * Creates a test resource fiber for unit testing.
 * This is a low-level utility that creates a ResourceFiber directly.
 * Sets up a rerender callback that automatically re-renders when state changes.
 */
export declare function createTestResource<R, P>(type: ResourceFn<R, P>): ResourceFiber<R, P>;
/**
 * Renders a test resource fiber with the given props and manages its lifecycle.
 * - Tracks resources for cleanup
 * - Returns the current state after render
 */
export declare function renderTest<R, P>(fiber: ResourceFiber<R, P>, props: P): R;
/**
 * Unmounts a specific resource fiber and removes it from tracking.
 */
export declare function unmountResource<R, P>(fiber: ResourceFiber<R, P>): void;
/**
 * Cleans up all resources. Should be called after each test.
 */
export declare function cleanupAllResources(): void;
/**
 * Gets the current committed state of a resource fiber.
 * Returns the state from the last render/commit cycle.
 */
export declare function getCommittedState<R, P>(fiber: ResourceFiber<R, P>): R;
/**
 * Helper to subscribe to resource state changes for testing.
 * Tracks call count and latest state value.
 */
export declare class TestSubscriber<T> {
    callCount: number;
    lastState: T;
    private fiber;
    constructor(fiber: ResourceFiber<any, any>);
    cleanup(): void;
}
/**
 * Helper class to manage resource lifecycle in tests with explicit control.
 * Useful when you need fine-grained control over mount/unmount timing.
 */
export declare class TestResourceManager<R, P> {
    fiber: ResourceFiber<R, P>;
    private isActive;
    constructor(fiber: ResourceFiber<R, P>);
    renderAndMount(props: P): R;
    cleanup(): void;
}
/**
 * Waits for the next tick of the event loop.
 * Useful for testing async state updates.
 */
export declare function waitForNextTick(): Promise<void>;
/**
 * Waits for a condition to be true with timeout.
 * Useful for testing eventual consistency.
 */
export declare function waitFor(condition: () => boolean, timeout?: number, interval?: number): Promise<void>;
/**
 * Creates a simple counter resource for testing.
 * Commonly used across multiple test files.
 */
export declare function createCounterResource(initialValue?: number): (props: {
    value?: number;
}) => {
    count: number;
};
/**
 * Creates a stateful counter resource for testing.
 * Includes increment/decrement functions.
 */
export declare function createStatefulCounterResource(): (props: {
    initial: number;
}) => {
    count: number;
    increment: () => void;
    decrement: () => void;
};
//# sourceMappingURL=test-utils.d.ts.map