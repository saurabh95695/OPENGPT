// src/hooks/tap-state.ts
import { getCurrentResourceFiber } from "../core/execution-context.js";
var rerender = (fiber) => {
  if (fiber.renderContext) {
    throw new Error("Resource updated during render");
  }
  if (fiber.isNeverMounted) {
    throw new Error("Resource updated before mount");
  }
  if (fiber.isMounted) {
    fiber.scheduleRerender();
  }
};
function getStateCell(initialValue) {
  const fiber = getCurrentResourceFiber();
  const index = fiber.currentIndex++;
  if (!fiber.isFirstRender && index >= fiber.cells.length) {
    throw new Error(
      "Rendered more hooks than during the previous render. Hooks must be called in the exact same order in every render."
    );
  }
  if (!fiber.cells[index]) {
    const value = typeof initialValue === "function" ? initialValue() : initialValue;
    const cell2 = {
      type: "state",
      value,
      set: (updater) => {
        const currentValue = cell2.value;
        const nextValue = typeof updater === "function" ? updater(currentValue) : updater;
        if (!Object.is(currentValue, nextValue)) {
          cell2.value = nextValue;
          rerender(fiber);
        }
      }
    };
    fiber.cells[index] = cell2;
  }
  const cell = fiber.cells[index];
  if (cell.type !== "state") {
    throw new Error("Hook order changed between renders");
  }
  return cell;
}
function tapState(initial) {
  const cell = getStateCell(initial);
  return [cell.value, cell.set];
}
export {
  rerender,
  tapState
};
//# sourceMappingURL=tap-state.js.map