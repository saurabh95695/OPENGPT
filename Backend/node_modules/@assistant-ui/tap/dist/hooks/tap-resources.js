// src/hooks/tap-resources.ts
import { tapEffect } from "./tap-effect.js";
import { tapMemo } from "./tap-memo.js";
import { tapState } from "./tap-state.js";
import {
  createResourceFiber,
  unmountResource,
  renderResource,
  commitResource
} from "../core/ResourceFiber.js";
function tapResources(elements) {
  const seenKeys = /* @__PURE__ */ new Set();
  elements.forEach((element, index) => {
    if (element.key === void 0) {
      throw new Error(
        `tapResources: All resource elements must have a key. Element at index ${index} is missing a key.`
      );
    }
    if (seenKeys.has(element.key)) {
      throw new Error(
        `tapResources: Duplicate key "${element.key}" found. All keys must be unique.`
      );
    }
    seenKeys.add(element.key);
  });
  const [stateVersion, rerender] = tapState({});
  const elementsByKey = tapMemo(
    () => new Map(elements.map((element) => [element.key, element])),
    [elements]
  );
  const [fibers] = tapState(
    () => /* @__PURE__ */ new Map()
  );
  const results = tapMemo(() => {
    const resultMap = /* @__PURE__ */ new Map();
    const currentKeys = /* @__PURE__ */ new Set();
    elementsByKey.forEach((element, key) => {
      currentKeys.add(key);
      let fiber = fibers.get(key);
      if (!fiber || fiber.resourceFn !== element.type) {
        if (fiber) unmountResource(fiber);
        fiber = createResourceFiber(element.type, () => rerender({}));
        fibers.set(key, fiber);
      }
      const result = renderResource(fiber, element.props);
      resultMap.set(key, result);
    });
    fibers.forEach((fiber, key) => {
      if (!currentKeys.has(key)) {
        unmountResource(fiber);
        fibers.delete(key);
      }
    });
    return resultMap;
  }, [elementsByKey, stateVersion]);
  tapEffect(() => {
    results.forEach((result, key) => {
      const fiber = fibers.get(key);
      if (fiber) {
        commitResource(fiber, result);
      }
    });
  }, [results, fibers]);
  tapEffect(() => {
    return () => {
      fibers.forEach((fiber) => {
        unmountResource(fiber);
      });
      fibers.clear();
    };
  }, [fibers]);
  return tapMemo(
    () => elements.map((element) => results.get(element.key)?.state),
    [elements, results]
  );
}
export {
  tapResources
};
//# sourceMappingURL=tap-resources.js.map