{"version":3,"sources":["../../src/hooks/tap-resources.ts"],"sourcesContent":["import { ResourceElement, ResourceFiber } from \"../core/types\";\nimport { tapEffect } from \"./tap-effect\";\nimport { tapMemo } from \"./tap-memo\";\nimport { tapState } from \"./tap-state\";\nimport {\n  createResourceFiber,\n  unmountResource,\n  renderResource,\n  commitResource,\n} from \"../core/ResourceFiber\";\n\nexport function tapResources<\n  T extends ReadonlyArray<ResourceElement<any, any>>,\n>(\n  elements: T,\n): { [K in keyof T]: T[K] extends ResourceElement<infer R, any> ? R : never } {\n  // Validate keys\n  const seenKeys = new Set<string | number>();\n  elements.forEach((element, index) => {\n    if (element.key === undefined) {\n      throw new Error(\n        `tapResources: All resource elements must have a key. Element at index ${index} is missing a key.`,\n      );\n    }\n    if (seenKeys.has(element.key)) {\n      throw new Error(\n        `tapResources: Duplicate key \"${element.key}\" found. All keys must be unique.`,\n      );\n    }\n    seenKeys.add(element.key);\n  });\n\n  const [stateVersion, rerender] = tapState({});\n\n  // Create a map of current elements by key for efficient lookup\n  const elementsByKey = tapMemo(\n    () => new Map(elements.map((element) => [element.key!, element])),\n    [elements],\n  );\n\n  // Track fibers persistently across renders\n  const [fibers] = tapState(\n    () => new Map<string | number, ResourceFiber<any, any>>(),\n  );\n\n  // Process each element\n  const results = tapMemo(() => {\n    const resultMap = new Map<string | number, any>();\n    const currentKeys = new Set<string | number>();\n\n    // Create/update fibers and render\n    elementsByKey.forEach((element, key) => {\n      currentKeys.add(key);\n\n      let fiber = fibers.get(key);\n\n      // Create new fiber if needed or type changed\n      if (!fiber || fiber.resourceFn !== element.type) {\n        if (fiber) unmountResource(fiber);\n        fiber = createResourceFiber(element.type, () => rerender({}));\n        fibers.set(key, fiber);\n      }\n\n      // Render with current props\n      const result = renderResource(fiber, element.props);\n      resultMap.set(key, result);\n    });\n\n    // Clean up removed fibers\n    fibers.forEach((fiber, key) => {\n      if (!currentKeys.has(key)) {\n        unmountResource(fiber);\n        fibers.delete(key);\n      }\n    });\n\n    return resultMap;\n  }, [elementsByKey, stateVersion]);\n\n  // Commit all renders\n  tapEffect(() => {\n    results.forEach((result, key) => {\n      const fiber = fibers.get(key);\n      if (fiber) {\n        commitResource(fiber, result);\n      }\n    });\n  }, [results, fibers]);\n\n  // Cleanup on unmount\n  tapEffect(() => {\n    return () => {\n      fibers.forEach((fiber) => {\n        unmountResource(fiber);\n      });\n      fibers.clear();\n    };\n  }, [fibers]);\n\n  // Return results in the same order as input elements\n  return tapMemo(\n    () => elements.map((element) => results.get(element.key!)?.state),\n    [elements, results],\n  ) as any;\n}\n"],"mappings":";AACA,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEA,SAAS,aAGd,UAC4E;AAE5E,QAAM,WAAW,oBAAI,IAAqB;AAC1C,WAAS,QAAQ,CAAC,SAAS,UAAU;AACnC,QAAI,QAAQ,QAAQ,QAAW;AAC7B,YAAM,IAAI;AAAA,QACR,yEAAyE,KAAK;AAAA,MAChF;AAAA,IACF;AACA,QAAI,SAAS,IAAI,QAAQ,GAAG,GAAG;AAC7B,YAAM,IAAI;AAAA,QACR,gCAAgC,QAAQ,GAAG;AAAA,MAC7C;AAAA,IACF;AACA,aAAS,IAAI,QAAQ,GAAG;AAAA,EAC1B,CAAC;AAED,QAAM,CAAC,cAAc,QAAQ,IAAI,SAAS,CAAC,CAAC;AAG5C,QAAM,gBAAgB;AAAA,IACpB,MAAM,IAAI,IAAI,SAAS,IAAI,CAAC,YAAY,CAAC,QAAQ,KAAM,OAAO,CAAC,CAAC;AAAA,IAChE,CAAC,QAAQ;AAAA,EACX;AAGA,QAAM,CAAC,MAAM,IAAI;AAAA,IACf,MAAM,oBAAI,IAA8C;AAAA,EAC1D;AAGA,QAAM,UAAU,QAAQ,MAAM;AAC5B,UAAM,YAAY,oBAAI,IAA0B;AAChD,UAAM,cAAc,oBAAI,IAAqB;AAG7C,kBAAc,QAAQ,CAAC,SAAS,QAAQ;AACtC,kBAAY,IAAI,GAAG;AAEnB,UAAI,QAAQ,OAAO,IAAI,GAAG;AAG1B,UAAI,CAAC,SAAS,MAAM,eAAe,QAAQ,MAAM;AAC/C,YAAI,MAAO,iBAAgB,KAAK;AAChC,gBAAQ,oBAAoB,QAAQ,MAAM,MAAM,SAAS,CAAC,CAAC,CAAC;AAC5D,eAAO,IAAI,KAAK,KAAK;AAAA,MACvB;AAGA,YAAM,SAAS,eAAe,OAAO,QAAQ,KAAK;AAClD,gBAAU,IAAI,KAAK,MAAM;AAAA,IAC3B,CAAC;AAGD,WAAO,QAAQ,CAAC,OAAO,QAAQ;AAC7B,UAAI,CAAC,YAAY,IAAI,GAAG,GAAG;AACzB,wBAAgB,KAAK;AACrB,eAAO,OAAO,GAAG;AAAA,MACnB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,GAAG,CAAC,eAAe,YAAY,CAAC;AAGhC,YAAU,MAAM;AACd,YAAQ,QAAQ,CAAC,QAAQ,QAAQ;AAC/B,YAAM,QAAQ,OAAO,IAAI,GAAG;AAC5B,UAAI,OAAO;AACT,uBAAe,OAAO,MAAM;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,SAAS,MAAM,CAAC;AAGpB,YAAU,MAAM;AACd,WAAO,MAAM;AACX,aAAO,QAAQ,CAAC,UAAU;AACxB,wBAAgB,KAAK;AAAA,MACvB,CAAC;AACD,aAAO,MAAM;AAAA,IACf;AAAA,EACF,GAAG,CAAC,MAAM,CAAC;AAGX,SAAO;AAAA,IACL,MAAM,SAAS,IAAI,CAAC,YAAY,QAAQ,IAAI,QAAQ,GAAI,GAAG,KAAK;AAAA,IAChE,CAAC,UAAU,OAAO;AAAA,EACpB;AACF;","names":[]}