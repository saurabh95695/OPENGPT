{"version":3,"sources":["../../src/hooks/tap-effect.ts"],"sourcesContent":["import { getCurrentResourceFiber } from \"../core/execution-context\";\nimport { EffectCallback, Cell } from \"../core/types\";\n\nfunction getEffectCell(): number {\n  const fiber = getCurrentResourceFiber();\n  const index = fiber.currentIndex++;\n\n  // Check if we're trying to use more hooks than in previous renders\n  if (!fiber.isFirstRender && index >= fiber.cells.length) {\n    throw new Error(\n      \"Rendered more hooks than during the previous render. \" +\n        \"Hooks must be called in the exact same order in every render.\",\n    );\n  }\n\n  if (!fiber.cells[index]) {\n    // Create the effect cell\n    const cell: Cell & { type: \"effect\" } = {\n      type: \"effect\",\n      mounted: false,\n    };\n\n    fiber.cells[index] = cell;\n  }\n\n  const cell = fiber.cells[index];\n  if (cell.type !== \"effect\") {\n    throw new Error(\"Hook order changed between renders\");\n  }\n\n  return index;\n}\n\nexport function tapEffect(effect: EffectCallback): void;\nexport function tapEffect(\n  effect: EffectCallback,\n  deps: readonly unknown[],\n): void;\nexport function tapEffect(\n  effect: EffectCallback,\n  deps?: readonly unknown[],\n): void {\n  const fiber = getCurrentResourceFiber();\n\n  // Reserve a spot for the effect cell and get its index\n  const cellIndex = getEffectCell();\n\n  // Add task to render context for execution in commit phase\n  fiber.renderContext!.commitTasks.push({\n    effect,\n    deps,\n    cellIndex,\n  });\n}\n"],"mappings":";AAAA,SAAS,+BAA+B;AAGxC,SAAS,gBAAwB;AAC/B,QAAM,QAAQ,wBAAwB;AACtC,QAAM,QAAQ,MAAM;AAGpB,MAAI,CAAC,MAAM,iBAAiB,SAAS,MAAM,MAAM,QAAQ;AACvD,UAAM,IAAI;AAAA,MACR;AAAA,IAEF;AAAA,EACF;AAEA,MAAI,CAAC,MAAM,MAAM,KAAK,GAAG;AAEvB,UAAMA,QAAkC;AAAA,MACtC,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAEA,UAAM,MAAM,KAAK,IAAIA;AAAA,EACvB;AAEA,QAAM,OAAO,MAAM,MAAM,KAAK;AAC9B,MAAI,KAAK,SAAS,UAAU;AAC1B,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACtD;AAEA,SAAO;AACT;AAOO,SAAS,UACd,QACA,MACM;AACN,QAAM,QAAQ,wBAAwB;AAGtC,QAAM,YAAY,cAAc;AAGhC,QAAM,cAAe,YAAY,KAAK;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;","names":["cell"]}